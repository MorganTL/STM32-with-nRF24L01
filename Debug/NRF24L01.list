
NRF24L01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007dbc  08007dbc  00017dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e28  08007e28  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08007e28  08007e28  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e28  08007e28  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e28  08007e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e2c  08007e2c  00017e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08007e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  2000017c  08007fac  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001398  08007fac  00021398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144a1  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003041  00000000  00000000  00034646  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf0  00000000  00000000  00037688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  00038378  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a711  00000000  00000000  00038ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e9c9  00000000  00000000  000535f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086824  00000000  00000000  00061fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e87de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b0  00000000  00000000  000e885c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007da4 	.word	0x08007da4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08007da4 	.word	0x08007da4

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b23      	ldr	r3, [pc, #140]	; (80001f0 <MX_GPIO_Init+0xa4>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a22      	ldr	r2, [pc, #136]	; (80001f0 <MX_GPIO_Init+0xa4>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b20      	ldr	r3, [pc, #128]	; (80001f0 <MX_GPIO_Init+0xa4>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b1d      	ldr	r3, [pc, #116]	; (80001f0 <MX_GPIO_Init+0xa4>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a1c      	ldr	r2, [pc, #112]	; (80001f0 <MX_GPIO_Init+0xa4>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1a      	ldr	r3, [pc, #104]	; (80001f0 <MX_GPIO_Init+0xa4>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b17      	ldr	r3, [pc, #92]	; (80001f0 <MX_GPIO_Init+0xa4>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a16      	ldr	r2, [pc, #88]	; (80001f0 <MX_GPIO_Init+0xa4>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b14      	ldr	r3, [pc, #80]	; (80001f0 <MX_GPIO_Init+0xa4>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, csn_Pin|ce_Pin, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2103      	movs	r1, #3
 80001ac:	4811      	ldr	r0, [pc, #68]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001ae:	f000 ffcd 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = irq_Pin;
 80001b2:	2310      	movs	r3, #16
 80001b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001b6:	2300      	movs	r3, #0
 80001b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ba:	2300      	movs	r3, #0
 80001bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(irq_GPIO_Port, &GPIO_InitStruct);
 80001be:	f107 0310 	add.w	r3, r7, #16
 80001c2:	4619      	mov	r1, r3
 80001c4:	480c      	ldr	r0, [pc, #48]	; (80001f8 <MX_GPIO_Init+0xac>)
 80001c6:	f000 fe67 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = csn_Pin|ce_Pin;
 80001ca:	2303      	movs	r3, #3
 80001cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ce:	2301      	movs	r3, #1
 80001d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d2:	2300      	movs	r3, #0
 80001d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001da:	f107 0310 	add.w	r3, r7, #16
 80001de:	4619      	mov	r1, r3
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001e2:	f000 fe59 	bl	8000e98 <HAL_GPIO_Init>

}
 80001e6:	bf00      	nop
 80001e8:	3720      	adds	r7, #32
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40021000 	.word	0x40021000
 80001f4:	40010c00 	.word	0x40010c00
 80001f8:	40010800 	.word	0x40010800

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b590      	push	{r4, r7, lr}
 80001fe:	b097      	sub	sp, #92	; 0x5c
 8000200:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fcb7 	bl	8000b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f925 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f7ff ff9f 	bl	800014c <MX_GPIO_Init>
  MX_SPI1_Init();
 800020e:	f000 fb9f 	bl	8000950 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000212:	f007 f925 	bl	8007460 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


	struct nRF24_Handle H_n24;
	H_n24.hspi = &hspi1;
 8000216:	4b8c      	ldr	r3, [pc, #560]	; (8000448 <main+0x24c>)
 8000218:	61bb      	str	r3, [r7, #24]
	H_n24.CSN_GPIO_Port = csn_GPIO_Port;
 800021a:	4b8c      	ldr	r3, [pc, #560]	; (800044c <main+0x250>)
 800021c:	61fb      	str	r3, [r7, #28]
	H_n24.CSN_Pin = csn_Pin;
 800021e:	2301      	movs	r3, #1
 8000220:	843b      	strh	r3, [r7, #32]
	H_n24.CE_GPIO_Port = ce_GPIO_Port;
 8000222:	4b8a      	ldr	r3, [pc, #552]	; (800044c <main+0x250>)
 8000224:	627b      	str	r3, [r7, #36]	; 0x24
	H_n24.CE_Pin = ce_Pin;
 8000226:	2302      	movs	r3, #2
 8000228:	853b      	strh	r3, [r7, #40]	; 0x28
	H_n24.IQR_GPIO_Port = irq_GPIO_Port;
 800022a:	4b89      	ldr	r3, [pc, #548]	; (8000450 <main+0x254>)
 800022c:	62fb      	str	r3, [r7, #44]	; 0x2c
	H_n24.IQR_Pin = irq_Pin;
 800022e:	2310      	movs	r3, #16
 8000230:	863b      	strh	r3, [r7, #48]	; 0x30

	nRF24_QS(H_n24, 1);
 8000232:	2301      	movs	r3, #1
 8000234:	9303      	str	r3, [sp, #12]
 8000236:	466c      	mov	r4, sp
 8000238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000240:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000244:	f107 0318 	add.w	r3, r7, #24
 8000248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800024a:	f000 f964 	bl	8000516 <nRF24_QS>
	nRF24_FlushRX(H_n24);
 800024e:	466c      	mov	r4, sp
 8000250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000254:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000258:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000262:	f000 fb52 	bl	800090a <nRF24_FlushRX>
	nRF24_FlushTX(H_n24);
 8000266:	466c      	mov	r4, sp
 8000268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800026c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000274:	f107 0318 	add.w	r3, r7, #24
 8000278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800027a:	f000 fb23 	bl	80008c4 <nRF24_FlushTX>
  {
    /* USER CODE END WHILE */



	  uint8_t addr0 = nRF24_RegRead(H_n24, 0x00);	// Should = 0x11 or 0x11
 800027e:	2300      	movs	r3, #0
 8000280:	9303      	str	r3, [sp, #12]
 8000282:	466c      	mov	r4, sp
 8000284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000288:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800028c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000296:	f000 faec 	bl	8000872 <nRF24_RegRead>
 800029a:	4603      	mov	r3, r0
 800029c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  uint8_t addr2 = nRF24_RegRead(H_n24, 0x02);	// Should = 0x02 (For frequency )
 80002a0:	2302      	movs	r3, #2
 80002a2:	9303      	str	r3, [sp, #12]
 80002a4:	466c      	mov	r4, sp
 80002a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80002ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002b8:	f000 fadb 	bl	8000872 <nRF24_RegRead>
 80002bc:	4603      	mov	r3, r0
 80002be:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	  uint8_t addr3 = nRF24_RegRead(H_n24, 0x03);	// Should = 0x03
 80002c2:	2303      	movs	r3, #3
 80002c4:	9303      	str	r3, [sp, #12]
 80002c6:	466c      	mov	r4, sp
 80002c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80002d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80002d4:	f107 0318 	add.w	r3, r7, #24
 80002d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002da:	f000 faca 	bl	8000872 <nRF24_RegRead>
 80002de:	4603      	mov	r3, r0
 80002e0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	  uint8_t addr4 = nRF24_RegRead(H_n24, 0x04);	// Should = 0xFF / 255
 80002e4:	2304      	movs	r3, #4
 80002e6:	9303      	str	r3, [sp, #12]
 80002e8:	466c      	mov	r4, sp
 80002ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80002f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80002f6:	f107 0318 	add.w	r3, r7, #24
 80002fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002fc:	f000 fab9 	bl	8000872 <nRF24_RegRead>
 8000300:	4603      	mov	r3, r0
 8000302:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	  uint8_t addr5 = nRF24_RegRead(H_n24, 0x05);	// Should = 0x02 / 2
 8000306:	2305      	movs	r3, #5
 8000308:	9303      	str	r3, [sp, #12]
 800030a:	466c      	mov	r4, sp
 800030c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000310:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000314:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800031e:	f000 faa8 	bl	8000872 <nRF24_RegRead>
 8000322:	4603      	mov	r3, r0
 8000324:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  uint8_t addr6 = nRF24_RegRead(H_n24, 0x06);	// Should = 0x08
 8000328:	2306      	movs	r3, #6
 800032a:	9303      	str	r3, [sp, #12]
 800032c:	466c      	mov	r4, sp
 800032e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000332:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000340:	f000 fa97 	bl	8000872 <nRF24_RegRead>
 8000344:	4603      	mov	r3, r0
 8000346:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	  uint8_t pipe0_size = nRF24_RegRead(H_n24, 0x11);
 800034a:	2311      	movs	r3, #17
 800034c:	9303      	str	r3, [sp, #12]
 800034e:	466c      	mov	r4, sp
 8000350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000354:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800035c:	f107 0318 	add.w	r3, r7, #24
 8000360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000362:	f000 fa86 	bl	8000872 <nRF24_RegRead>
 8000366:	4603      	mov	r3, r0
 8000368:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  uint8_t addr17 = nRF24_RegRead(H_n24, 0x17);
 800036c:	2317      	movs	r3, #23
 800036e:	9303      	str	r3, [sp, #12]
 8000370:	466c      	mov	r4, sp
 8000372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000376:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800037a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000384:	f000 fa75 	bl	8000872 <nRF24_RegRead>
 8000388:	4603      	mov	r3, r0
 800038a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	  nRF24_RegWrite(H_n24, 0x07, 0x70);		// Clear interrupt
 800038e:	2370      	movs	r3, #112	; 0x70
 8000390:	9304      	str	r3, [sp, #16]
 8000392:	2307      	movs	r3, #7
 8000394:	9303      	str	r3, [sp, #12]
 8000396:	466c      	mov	r4, sp
 8000398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80003a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80003a4:	f107 0318 	add.w	r3, r7, #24
 80003a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003aa:	f000 fa35 	bl	8000818 <nRF24_RegWrite>

	  uint8_t rx_addr[5];
	  nRF24_GetDataPipeADDR(H_n24, 0x0A, rx_addr);	// the pipe address should be 0xE7E7E7E7E7
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	9304      	str	r3, [sp, #16]
 80003b4:	230a      	movs	r3, #10
 80003b6:	9303      	str	r3, [sp, #12]
 80003b8:	466c      	mov	r4, sp
 80003ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80003c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80003c6:	f107 0318 	add.w	r3, r7, #24
 80003ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003cc:	f000 f9fb 	bl	80007c6 <nRF24_GetDataPipeADDR>
	  uint8_t tx_addr[5];
	  nRF24_GetDataPipeADDR(H_n24, 0x10, tx_addr);
 80003d0:	f107 0308 	add.w	r3, r7, #8
 80003d4:	9304      	str	r3, [sp, #16]
 80003d6:	2310      	movs	r3, #16
 80003d8:	9303      	str	r3, [sp, #12]
 80003da:	466c      	mov	r4, sp
 80003dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80003e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80003e8:	f107 0318 	add.w	r3, r7, #24
 80003ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003ee:	f000 f9ea 	bl	80007c6 <nRF24_GetDataPipeADDR>


	  uint8_t W_TX_Payload = 0xA0;
 80003f2:	23a0      	movs	r3, #160	; 0xa0
 80003f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  uint8_t Data = 0x14;
 80003f8:	2314      	movs	r3, #20
 80003fa:	71fb      	strb	r3, [r7, #7]

	  nRF24_TX_WritePayload(H_n24, &Data, sizeof(Data), W_TX_Payload);
 80003fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000400:	9305      	str	r3, [sp, #20]
 8000402:	2301      	movs	r3, #1
 8000404:	9304      	str	r3, [sp, #16]
 8000406:	1dfb      	adds	r3, r7, #7
 8000408:	9303      	str	r3, [sp, #12]
 800040a:	466c      	mov	r4, sp
 800040c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000410:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000414:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000418:	f107 0318 	add.w	r3, r7, #24
 800041c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800041e:	f000 f941 	bl	80006a4 <nRF24_TX_WritePayload>

	  nRF24_TX_SendPayload(H_n24, 0);
 8000422:	2300      	movs	r3, #0
 8000424:	9303      	str	r3, [sp, #12]
 8000426:	466c      	mov	r4, sp
 8000428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800042c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000434:	f107 0318 	add.w	r3, r7, #24
 8000438:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800043a:	f000 f977 	bl	800072c <nRF24_TX_SendPayload>

//	  nRF24_FlushTX(H_n24);
	  HAL_Delay(1000);
 800043e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000442:	f000 fbf9 	bl	8000c38 <HAL_Delay>
  {
 8000446:	e71a      	b.n	800027e <main+0x82>
 8000448:	200003bc 	.word	0x200003bc
 800044c:	40010c00 	.word	0x40010c00
 8000450:	40010800 	.word	0x40010800

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b094      	sub	sp, #80	; 0x50
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800045e:	2228      	movs	r2, #40	; 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f007 fc96 	bl	8007d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000484:	2301      	movs	r3, #1
 8000486:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000492:	2301      	movs	r3, #1
 8000494:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000496:	2302      	movs	r3, #2
 8000498:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800049e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004aa:	4618      	mov	r0, r3
 80004ac:	f002 f9ea 	bl	8002884 <HAL_RCC_OscConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004b6:	f000 f828 	bl	800050a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ba:	230f      	movs	r3, #15
 80004bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004be:	2302      	movs	r3, #2
 80004c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	2101      	movs	r1, #1
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 fc54 	bl	8002d84 <HAL_RCC_ClockConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004e2:	f000 f812 	bl	800050a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004e6:	2310      	movs	r3, #16
 80004e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004ee:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 fdb0 	bl	8003058 <HAL_RCCEx_PeriphCLKConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004fe:	f000 f804 	bl	800050a <Error_Handler>
  }
}
 8000502:	bf00      	nop
 8000504:	3750      	adds	r7, #80	; 0x50
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr

08000516 <nRF24_QS>:

/*
 *  @brief Power on and set up all the necessary configs for fast prototyping
 */
void nRF24_QS(struct nRF24_Handle nRF24_H, uint8_t TX_mode)
{
 8000516:	b084      	sub	sp, #16
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b087      	sub	sp, #28
 800051c:	af06      	add	r7, sp, #24
 800051e:	f107 0410 	add.w	r4, r7, #16
 8000522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_Delay(100);		// 100ms Power on time
 8000526:	2064      	movs	r0, #100	; 0x64
 8000528:	f000 fb86 	bl	8000c38 <HAL_Delay>
	HAL_GPIO_WritePin(nRF24_H.CE_GPIO_Port, nRF24_H.CE_Pin, GPIO_PIN_RESET);	// Standby I mode
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	8c39      	ldrh	r1, [r7, #32]
 8000530:	2200      	movs	r2, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fe0a 	bl	800114c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000538:	2014      	movs	r0, #20
 800053a:	f000 fb7d 	bl	8000c38 <HAL_Delay>
	HAL_GPIO_WritePin(nRF24_H.CSN_GPIO_Port, nRF24_H.CSN_Pin, GPIO_PIN_SET);
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	8b39      	ldrh	r1, [r7, #24]
 8000542:	2201      	movs	r2, #1
 8000544:	4618      	mov	r0, r3
 8000546:	f000 fe01 	bl	800114c <HAL_GPIO_WritePin>
	nRF24_QSconfig(nRF24_H);
 800054a:	466c      	mov	r4, sp
 800054c:	f107 0320 	add.w	r3, r7, #32
 8000550:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000554:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800055e:	f000 f849 	bl	80005f4 <nRF24_QSconfig>

	nRF24_FlushTX(nRF24_H);
 8000562:	466c      	mov	r4, sp
 8000564:	f107 0320 	add.w	r3, r7, #32
 8000568:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800056c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000576:	f000 f9a5 	bl	80008c4 <nRF24_FlushTX>
	if(!TX_mode)
 800057a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800057e:	2b00      	cmp	r3, #0
 8000580:	d121      	bne.n	80005c6 <nRF24_QS+0xb0>
	{
		nRF24_RegWrite(nRF24_H, CONFIG, 0x0B); // PRX, Power ON, CRC, 1 byte
 8000582:	2300      	movs	r3, #0
 8000584:	220b      	movs	r2, #11
 8000586:	9204      	str	r2, [sp, #16]
 8000588:	9303      	str	r3, [sp, #12]
 800058a:	466c      	mov	r4, sp
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000594:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800059e:	f000 f93b 	bl	8000818 <nRF24_RegWrite>
		nRF24_FlushRX(nRF24_H);
 80005a2:	466c      	mov	r4, sp
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b6:	f000 f9a8 	bl	800090a <nRF24_FlushRX>
		HAL_GPIO_WritePin(nRF24_H.CE_GPIO_Port, nRF24_H.CE_Pin, GPIO_PIN_SET);	// RX mode, Start listening
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	8c39      	ldrh	r1, [r7, #32]
 80005be:	2201      	movs	r2, #1
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fdc3 	bl	800114c <HAL_GPIO_WritePin>
	}

	nRF24_RegWrite(nRF24_H, STATUS, 0x70);	// Clear TX/RX Interrupt
 80005c6:	2307      	movs	r3, #7
 80005c8:	2270      	movs	r2, #112	; 0x70
 80005ca:	9204      	str	r2, [sp, #16]
 80005cc:	9303      	str	r3, [sp, #12]
 80005ce:	466c      	mov	r4, sp
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e2:	f000 f919 	bl	8000818 <nRF24_RegWrite>

};
 80005e6:	bf00      	nop
 80005e8:	3704      	adds	r7, #4
 80005ea:	46bd      	mov	sp, r7
 80005ec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80005f0:	b004      	add	sp, #16
 80005f2:	4770      	bx	lr

080005f4 <nRF24_QSconfig>:

/*
 *  @brief Set up all the necessary configs for fast prototyping
 */
void nRF24_QSconfig(struct nRF24_Handle nRF24_H)
{
 80005f4:	b084      	sub	sp, #16
 80005f6:	b590      	push	{r4, r7, lr}
 80005f8:	b089      	sub	sp, #36	; 0x24
 80005fa:	af06      	add	r7, sp, #24
 80005fc:	f107 0418 	add.w	r4, r7, #24
 8000600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//nRF24_RegWrite(nRF24_H, CONFIG, 0x0A); // PTX, Power ON, CRC, 1 byte
	nRF24_RegWrite(nRF24_H, CONFIG, 0x0A); // PTX, Power ON, CRC, 1 byte
 8000604:	2300      	movs	r3, #0
 8000606:	220a      	movs	r2, #10
 8000608:	9204      	str	r2, [sp, #16]
 800060a:	9303      	str	r3, [sp, #12]
 800060c:	466c      	mov	r4, sp
 800060e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000620:	f000 f8fa 	bl	8000818 <nRF24_RegWrite>
	nRF24_RegWrite(nRF24_H, SETUP_RETR, 0xFF); // 15 Retry, 4ms wait
 8000624:	2304      	movs	r3, #4
 8000626:	22ff      	movs	r2, #255	; 0xff
 8000628:	9204      	str	r2, [sp, #16]
 800062a:	9303      	str	r3, [sp, #12]
 800062c:	466c      	mov	r4, sp
 800062e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000632:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000640:	f000 f8ea 	bl	8000818 <nRF24_RegWrite>
	nRF24_RegWrite(nRF24_H, RF_SETUP, 0x0E); // 0dBm, 2Mbp
 8000644:	2306      	movs	r3, #6
 8000646:	220e      	movs	r2, #14
 8000648:	9204      	str	r2, [sp, #16]
 800064a:	9303      	str	r3, [sp, #12]
 800064c:	466c      	mov	r4, sp
 800064e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000652:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000660:	f000 f8da 	bl	8000818 <nRF24_RegWrite>
	for (uint8_t i_addr = 0x11; i_addr < 0x17 ; i_addr++)	// All pipe size = 2 byte
 8000664:	2311      	movs	r3, #17
 8000666:	71fb      	strb	r3, [r7, #7]
 8000668:	e012      	b.n	8000690 <nRF24_QSconfig+0x9c>
	{
		nRF24_RegWrite(nRF24_H, i_addr, 0x02);
 800066a:	2302      	movs	r3, #2
 800066c:	9304      	str	r3, [sp, #16]
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	9303      	str	r3, [sp, #12]
 8000672:	466c      	mov	r4, sp
 8000674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000678:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800067c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000680:	f107 0318 	add.w	r3, r7, #24
 8000684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000686:	f000 f8c7 	bl	8000818 <nRF24_RegWrite>
	for (uint8_t i_addr = 0x11; i_addr < 0x17 ; i_addr++)	// All pipe size = 2 byte
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	3301      	adds	r3, #1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	2b16      	cmp	r3, #22
 8000694:	d9e9      	bls.n	800066a <nRF24_QSconfig+0x76>
	}
};
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80006a0:	b004      	add	sp, #16
 80006a2:	4770      	bx	lr

080006a4 <nRF24_TX_WritePayload>:
 *
 *  @param write_type: 0xA0 (w/ ARK) or 0xB0 (w/o ARK)
 *
 */
void nRF24_TX_WritePayload(struct nRF24_Handle nRF24_H, uint8_t* payload, uint8_t payload_size, uint8_t write_type)
{
 80006a4:	b084      	sub	sp, #16
 80006a6:	b590      	push	{r4, r7, lr}
 80006a8:	b087      	sub	sp, #28
 80006aa:	af04      	add	r7, sp, #16
 80006ac:	f107 0418 	add.w	r4, r7, #24
 80006b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (write_type != 0xA0 || write_type != 0xB0)
 80006b4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80006b8:	2ba0      	cmp	r3, #160	; 0xa0
	{
		// TODO: Raise Error
	}

	uint8_t TX_full = (nRF24_RegRead(nRF24_H, FIFO_STATUS) & 0x20) >> 5;	// Get TX FIFO Full flag
 80006ba:	2317      	movs	r3, #23
 80006bc:	9303      	str	r3, [sp, #12]
 80006be:	466c      	mov	r4, sp
 80006c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006cc:	f107 0318 	add.w	r3, r7, #24
 80006d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006d2:	f000 f8ce 	bl	8000872 <nRF24_RegRead>
 80006d6:	4603      	mov	r3, r0
 80006d8:	115b      	asrs	r3, r3, #5
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	71fb      	strb	r3, [r7, #7]

	if (sizeof(payload) < 33 && !TX_full)
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d11a      	bne.n	800071e <nRF24_TX_WritePayload+0x7a>
	{
	HAL_GPIO_WritePin(nRF24_H.CSN_GPIO_Port, nRF24_H.CSN_Pin, GPIO_PIN_RESET);	// Select slave
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	8c39      	ldrh	r1, [r7, #32]
 80006ec:	2200      	movs	r2, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fd2c 	bl	800114c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nRF24_H.hspi, &write_type, sizeof(write_type), 1);		// Write with or w/o ART (DO NOT CHANGE THIS!!)
 80006f4:	69b8      	ldr	r0, [r7, #24]
 80006f6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80006fa:	2301      	movs	r3, #1
 80006fc:	2201      	movs	r2, #1
 80006fe:	f002 fde5 	bl	80032cc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nRF24_H.hspi, payload, payload_size, 1);
 8000702:	69b8      	ldr	r0, [r7, #24]
 8000704:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000708:	b29a      	uxth	r2, r3
 800070a:	2301      	movs	r3, #1
 800070c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800070e:	f002 fddd 	bl	80032cc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(nRF24_H.CSN_GPIO_Port, nRF24_H.CSN_Pin, GPIO_PIN_SET);	// Deselect slave
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	8c39      	ldrh	r1, [r7, #32]
 8000716:	2201      	movs	r2, #1
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fd17 	bl	800114c <HAL_GPIO_WritePin>
	{
		// TODO: Raise Error
	}


};
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000728:	b004      	add	sp, #16
 800072a:	4770      	bx	lr

0800072c <nRF24_TX_SendPayload>:
/*
 *	TODO: Fill in comments
 */
void nRF24_TX_SendPayload(struct nRF24_Handle nRF24_H, uint8_t send_all)
{
 800072c:	b084      	sub	sp, #16
 800072e:	b590      	push	{r4, r7, lr}
 8000730:	b089      	sub	sp, #36	; 0x24
 8000732:	af06      	add	r7, sp, #24
 8000734:	f107 0418 	add.w	r4, r7, #24
 8000738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint8_t paydload_empty = ((nRF24_RegRead(nRF24_H, FIFO_STATUS) & 0x10) >> 4); // Get the TX FIFO empty flag
 800073c:	2317      	movs	r3, #23
 800073e:	9303      	str	r3, [sp, #12]
 8000740:	466c      	mov	r4, sp
 8000742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000746:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800074a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800074e:	f107 0318 	add.w	r3, r7, #24
 8000752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000754:	f000 f88d 	bl	8000872 <nRF24_RegRead>
 8000758:	4603      	mov	r3, r0
 800075a:	111b      	asrs	r3, r3, #4
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	71fb      	strb	r3, [r7, #7]
	if(!send_all && !paydload_empty)
 8000764:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000768:	2b00      	cmp	r3, #0
 800076a:	d125      	bne.n	80007b8 <nRF24_TX_SendPayload+0x8c>
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d122      	bne.n	80007b8 <nRF24_TX_SendPayload+0x8c>
	{
		HAL_GPIO_WritePin(nRF24_H.CE_GPIO_Port, nRF24_H.CE_Pin, GPIO_PIN_SET);
 8000772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000774:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000776:	2201      	movs	r2, #1
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fce7 	bl	800114c <HAL_GPIO_WritePin>
		HAL_Delay(10);	// A 10us high pulse to send on packet
 800077e:	200a      	movs	r0, #10
 8000780:	f000 fa5a 	bl	8000c38 <HAL_Delay>
		HAL_GPIO_WritePin(nRF24_H.CE_GPIO_Port, nRF24_H.CE_Pin, GPIO_PIN_RESET);
 8000784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000786:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000788:	2200      	movs	r2, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fcde 	bl	800114c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000794:	f000 fa50 	bl	8000c38 <HAL_Delay>

		nRF24_RegWrite(nRF24_H, STATUS, 0x70);	// Clear TX/RX Interrupt
 8000798:	2307      	movs	r3, #7
 800079a:	2270      	movs	r2, #112	; 0x70
 800079c:	9204      	str	r2, [sp, #16]
 800079e:	9303      	str	r3, [sp, #12]
 80007a0:	466c      	mov	r4, sp
 80007a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b4:	f000 f830 	bl	8000818 <nRF24_RegWrite>
	}
	else
	{
		// TODO: payload empty ERROR
	}
};
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80007c2:	b004      	add	sp, #16
 80007c4:	4770      	bx	lr

080007c6 <nRF24_GetDataPipeADDR>:
 *
 *	@param pipe_addr: a uint8_t pointer with at least 5 element (output)
 *
 */
void nRF24_GetDataPipeADDR(struct nRF24_Handle nRF24_H, uint8_t reg_addr, uint8_t* pipe_addr)
{
 80007c6:	b084      	sub	sp, #16
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	f107 0c08 	add.w	ip, r7, #8
 80007d0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// TODO: add a array size check
	if(pipe_addr)
 80007d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d018      	beq.n	800080c <nRF24_GetDataPipeADDR+0x46>
	{
	HAL_GPIO_WritePin(nRF24_H.CSN_GPIO_Port, nRF24_H.CSN_Pin, GPIO_PIN_RESET);	// Select slave
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	8a39      	ldrh	r1, [r7, #16]
 80007de:	2200      	movs	r2, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fcb3 	bl	800114c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nRF24_H.hspi, &(reg_addr), 1, 1);
 80007e6:	68b8      	ldr	r0, [r7, #8]
 80007e8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80007ec:	2301      	movs	r3, #1
 80007ee:	2201      	movs	r2, #1
 80007f0:	f002 fd6c 	bl	80032cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(nRF24_H.hspi, pipe_addr, 5, 10);
 80007f4:	68b8      	ldr	r0, [r7, #8]
 80007f6:	230a      	movs	r3, #10
 80007f8:	2205      	movs	r2, #5
 80007fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007fc:	f002 fea2 	bl	8003544 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(nRF24_H.CSN_GPIO_Port, nRF24_H.CSN_Pin, GPIO_PIN_SET);	// Deselect slave
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	8a39      	ldrh	r1, [r7, #16]
 8000804:	2201      	movs	r2, #1
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fca0 	bl	800114c <HAL_GPIO_WritePin>
	}
	else
	{
		// TODO: Raise ERROR (array size is too small)
	}
};
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000814:	b004      	add	sp, #16
 8000816:	4770      	bx	lr

08000818 <nRF24_RegWrite>:
 *
 *  @param value: 8 byte value, *Least Significant Bit* first
 *
 */
void nRF24_RegWrite(struct nRF24_Handle nRF24_H ,uint8_t address, uint8_t value)
{
 8000818:	b084      	sub	sp, #16
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	f107 0c10 	add.w	ip, r7, #16
 8000824:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t W_address = address + 0x20;	// Add 32 to register address to write
 8000828:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800082c:	3320      	adds	r3, #32
 800082e:	b2db      	uxtb	r3, r3
 8000830:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(nRF24_H.CSN_GPIO_Port, nRF24_H.CSN_Pin, GPIO_PIN_RESET);	// Select slave
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	8b39      	ldrh	r1, [r7, #24]
 8000836:	2200      	movs	r2, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fc87 	bl	800114c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nRF24_H.hspi, &W_address, 1, 1);
 800083e:	6938      	ldr	r0, [r7, #16]
 8000840:	1df9      	adds	r1, r7, #7
 8000842:	2301      	movs	r3, #1
 8000844:	2201      	movs	r2, #1
 8000846:	f002 fd41 	bl	80032cc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nRF24_H.hspi, &value, 1, 1);
 800084a:	6938      	ldr	r0, [r7, #16]
 800084c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000850:	2301      	movs	r3, #1
 8000852:	2201      	movs	r2, #1
 8000854:	f002 fd3a 	bl	80032cc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(nRF24_H.CSN_GPIO_Port, nRF24_H.CSN_Pin, GPIO_PIN_SET);	// Deselect slave
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	8b39      	ldrh	r1, [r7, #24]
 800085c:	2201      	movs	r2, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fc74 	bl	800114c <HAL_GPIO_WritePin>
};
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800086e:	b004      	add	sp, #16
 8000870:	4770      	bx	lr

08000872 <nRF24_RegRead>:
 *
 *  @param address: the register address or SPI command (please refer to nRF24L01 datasheet p46)
 *
 */
uint8_t nRF24_RegRead(struct nRF24_Handle nRF24_H, uint8_t address)
{
 8000872:	b084      	sub	sp, #16
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	f107 0c10 	add.w	ip, r7, #16
 800087e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t data;
	HAL_GPIO_WritePin(nRF24_H.CSN_GPIO_Port, nRF24_H.CSN_Pin, GPIO_PIN_RESET);	// Select slave
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	8b39      	ldrh	r1, [r7, #24]
 8000886:	2200      	movs	r2, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fc5f 	bl	800114c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nRF24_H.hspi, &address, 1, 1);
 800088e:	6938      	ldr	r0, [r7, #16]
 8000890:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000894:	2301      	movs	r3, #1
 8000896:	2201      	movs	r2, #1
 8000898:	f002 fd18 	bl	80032cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(nRF24_H.hspi, &data, 1, 1);
 800089c:	6938      	ldr	r0, [r7, #16]
 800089e:	1df9      	adds	r1, r7, #7
 80008a0:	2301      	movs	r3, #1
 80008a2:	2201      	movs	r2, #1
 80008a4:	f002 fe4e 	bl	8003544 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(nRF24_H.CSN_GPIO_Port, nRF24_H.CSN_Pin, GPIO_PIN_SET);	// Deselect slave
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	8b39      	ldrh	r1, [r7, #24]
 80008ac:	2201      	movs	r2, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fc4c 	bl	800114c <HAL_GPIO_WritePin>
	return data;
 80008b4:	79fb      	ldrb	r3, [r7, #7]
};
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <nRF24_FlushTX>:
 *
 *  @param nRF24_H: nRF24 handler which contains all necessary pins info.
 *
 */
void nRF24_FlushTX(struct nRF24_Handle nRF24_H)
{
 80008c4:	b084      	sub	sp, #16
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	f107 0c10 	add.w	ip, r7, #16
 80008d0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Flush_TX = 225;
 80008d4:	23e1      	movs	r3, #225	; 0xe1
 80008d6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(nRF24_H.CSN_GPIO_Port, nRF24_H.CSN_Pin, GPIO_PIN_RESET);	// Select slave
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	8b39      	ldrh	r1, [r7, #24]
 80008dc:	2200      	movs	r2, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fc34 	bl	800114c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nRF24_H.hspi, &Flush_TX, 1, 1);
 80008e4:	6938      	ldr	r0, [r7, #16]
 80008e6:	1df9      	adds	r1, r7, #7
 80008e8:	2301      	movs	r3, #1
 80008ea:	2201      	movs	r2, #1
 80008ec:	f002 fcee 	bl	80032cc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(nRF24_H.CSN_GPIO_Port, nRF24_H.CSN_Pin, GPIO_PIN_SET);	// Deselect slave
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	8b39      	ldrh	r1, [r7, #24]
 80008f4:	2201      	movs	r2, #1
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fc28 	bl	800114c <HAL_GPIO_WritePin>
};
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000906:	b004      	add	sp, #16
 8000908:	4770      	bx	lr

0800090a <nRF24_FlushRX>:
 *
 *	@param nRF24_H: nRF24 handler which contains all necessary pins info.
 *
 */
void nRF24_FlushRX(struct nRF24_Handle nRF24_H)
{
 800090a:	b084      	sub	sp, #16
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	f107 0c10 	add.w	ip, r7, #16
 8000916:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t Flush_RX = 226;
 800091a:	23e2      	movs	r3, #226	; 0xe2
 800091c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(nRF24_H.CSN_GPIO_Port, nRF24_H.CSN_Pin, GPIO_PIN_RESET);	// Select slave
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	8b39      	ldrh	r1, [r7, #24]
 8000922:	2200      	movs	r2, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f000 fc11 	bl	800114c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nRF24_H.hspi, &Flush_RX, 1, 1);
 800092a:	6938      	ldr	r0, [r7, #16]
 800092c:	1df9      	adds	r1, r7, #7
 800092e:	2301      	movs	r3, #1
 8000930:	2201      	movs	r2, #1
 8000932:	f002 fccb 	bl	80032cc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(nRF24_H.CSN_GPIO_Port, nRF24_H.CSN_Pin, GPIO_PIN_SET);	// Deselect slave
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	8b39      	ldrh	r1, [r7, #24]
 800093a:	2201      	movs	r2, #1
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fc05 	bl	800114c <HAL_GPIO_WritePin>
};
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800094c:	b004      	add	sp, #16
 800094e:	4770      	bx	lr

08000950 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000956:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <MX_SPI1_Init+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI1_Init+0x64>)
 800095c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000960:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI1_Init+0x64>)
 800097c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000980:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000984:	2210      	movs	r2, #16
 8000986:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI1_Init+0x64>)
 800099c:	220a      	movs	r2, #10
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_SPI1_Init+0x64>)
 80009a2:	f002 fc0f 	bl	80031c4 <HAL_SPI_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009ac:	f7ff fdad 	bl	800050a <Error_Handler>
  }

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200003bc 	.word	0x200003bc
 80009b8:	40013000 	.word	0x40013000

080009bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <HAL_SPI_MspInit+0x88>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d12f      	bne.n	8000a3c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <HAL_SPI_MspInit+0x8c>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <HAL_SPI_MspInit+0x8c>)
 80009e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <HAL_SPI_MspInit+0x8c>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_SPI_MspInit+0x8c>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <HAL_SPI_MspInit+0x8c>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_SPI_MspInit+0x8c>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = N24_SCK_Pin|N24_MOSI_Pin;
 8000a0c:	23a0      	movs	r3, #160	; 0xa0
 8000a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <HAL_SPI_MspInit+0x90>)
 8000a20:	f000 fa3a 	bl	8000e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = N24_MISO_Pin;
 8000a24:	2340      	movs	r3, #64	; 0x40
 8000a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(N24_MISO_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_SPI_MspInit+0x90>)
 8000a38:	f000 fa2e 	bl	8000e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40013000 	.word	0x40013000
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010800 	.word	0x40010800

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_MspInit+0x5c>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a14      	ldr	r2, [pc, #80]	; (8000aac <HAL_MspInit+0x5c>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_MspInit+0x5c>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x5c>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <HAL_MspInit+0x5c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_MspInit+0x5c>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_MspInit+0x60>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_MspInit+0x60>)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010000 	.word	0x40010000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <HardFault_Handler+0x4>

08000ac6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <MemManage_Handler+0x4>

08000acc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <BusFault_Handler+0x4>

08000ad2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <UsageFault_Handler+0x4>

08000ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b00:	f000 f87e 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b0e:	f000 fc66 	bl	80013de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200010ac 	.word	0x200010ac

08000b1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b2a:	e003      	b.n	8000b34 <LoopCopyDataInit>

08000b2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b32:	3104      	adds	r1, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b34:	480a      	ldr	r0, [pc, #40]	; (8000b60 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b3c:	d3f6      	bcc.n	8000b2c <CopyDataInit>
  ldr r2, =_sbss
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b40:	e002      	b.n	8000b48 <LoopFillZerobss>

08000b42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b44:	f842 3b04 	str.w	r3, [r2], #4

08000b48 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b4c:	d3f9      	bcc.n	8000b42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b4e:	f7ff ffe5 	bl	8000b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b52:	f007 f8fb 	bl	8007d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b56:	f7ff fb51 	bl	80001fc <main>
  bx lr
 8000b5a:	4770      	bx	lr
  ldr r3, =_sidata
 8000b5c:	08007e30 	.word	0x08007e30
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b64:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8000b68:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8000b6c:	20001398 	.word	0x20001398

08000b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC1_2_IRQHandler>
	...

08000b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_Init+0x28>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_Init+0x28>)
 8000b7e:	f043 0310 	orr.w	r3, r3, #16
 8000b82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f945 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 f808 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b90:	f7ff ff5e 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x54>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x58>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f95d 	bl	8000e7e <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00e      	b.n	8000bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d80a      	bhi.n	8000bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f925 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <HAL_InitTick+0x5c>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x1c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_IncTick+0x20>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <HAL_IncTick+0x20>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000414 	.word	0x20000414

08000c24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b02      	ldr	r3, [pc, #8]	; (8000c34 <HAL_GetTick+0x10>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	20000414 	.word	0x20000414

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff fff0 	bl	8000c24 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c50:	d005      	beq.n	8000c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_Delay+0x40>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5e:	bf00      	nop
 8000c60:	f7ff ffe0 	bl	8000c24 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d8f7      	bhi.n	8000c60 <HAL_Delay+0x28>
  {
  }
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000008 	.word	0x20000008

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db0b      	blt.n	8000d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 021f 	and.w	r2, r3, #31
 8000cf8:	4906      	ldr	r1, [pc, #24]	; (8000d14 <__NVIC_EnableIRQ+0x34>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	2001      	movs	r0, #1
 8000d02:	fa00 f202 	lsl.w	r2, r0, r2
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f7ff ff90 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff2d 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff42 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff90 	bl	8000d6c <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5f 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff35 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffa2 	bl	8000dd0 <SysTick_Config>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b08b      	sub	sp, #44	; 0x2c
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	e127      	b.n	80010fc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000eac:	2201      	movs	r2, #1
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	69fa      	ldr	r2, [r7, #28]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	f040 8116 	bne.w	80010f6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b12      	cmp	r3, #18
 8000ed0:	d034      	beq.n	8000f3c <HAL_GPIO_Init+0xa4>
 8000ed2:	2b12      	cmp	r3, #18
 8000ed4:	d80d      	bhi.n	8000ef2 <HAL_GPIO_Init+0x5a>
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d02b      	beq.n	8000f32 <HAL_GPIO_Init+0x9a>
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d804      	bhi.n	8000ee8 <HAL_GPIO_Init+0x50>
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d031      	beq.n	8000f46 <HAL_GPIO_Init+0xae>
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d01c      	beq.n	8000f20 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ee6:	e048      	b.n	8000f7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d043      	beq.n	8000f74 <HAL_GPIO_Init+0xdc>
 8000eec:	2b11      	cmp	r3, #17
 8000eee:	d01b      	beq.n	8000f28 <HAL_GPIO_Init+0x90>
          break;
 8000ef0:	e043      	b.n	8000f7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ef2:	4a89      	ldr	r2, [pc, #548]	; (8001118 <HAL_GPIO_Init+0x280>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d026      	beq.n	8000f46 <HAL_GPIO_Init+0xae>
 8000ef8:	4a87      	ldr	r2, [pc, #540]	; (8001118 <HAL_GPIO_Init+0x280>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d806      	bhi.n	8000f0c <HAL_GPIO_Init+0x74>
 8000efe:	4a87      	ldr	r2, [pc, #540]	; (800111c <HAL_GPIO_Init+0x284>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d020      	beq.n	8000f46 <HAL_GPIO_Init+0xae>
 8000f04:	4a86      	ldr	r2, [pc, #536]	; (8001120 <HAL_GPIO_Init+0x288>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01d      	beq.n	8000f46 <HAL_GPIO_Init+0xae>
          break;
 8000f0a:	e036      	b.n	8000f7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f0c:	4a85      	ldr	r2, [pc, #532]	; (8001124 <HAL_GPIO_Init+0x28c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d019      	beq.n	8000f46 <HAL_GPIO_Init+0xae>
 8000f12:	4a85      	ldr	r2, [pc, #532]	; (8001128 <HAL_GPIO_Init+0x290>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d016      	beq.n	8000f46 <HAL_GPIO_Init+0xae>
 8000f18:	4a84      	ldr	r2, [pc, #528]	; (800112c <HAL_GPIO_Init+0x294>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0xae>
          break;
 8000f1e:	e02c      	b.n	8000f7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	623b      	str	r3, [r7, #32]
          break;
 8000f26:	e028      	b.n	8000f7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e023      	b.n	8000f7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	3308      	adds	r3, #8
 8000f38:	623b      	str	r3, [r7, #32]
          break;
 8000f3a:	e01e      	b.n	8000f7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	330c      	adds	r3, #12
 8000f42:	623b      	str	r3, [r7, #32]
          break;
 8000f44:	e019      	b.n	8000f7a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	623b      	str	r3, [r7, #32]
          break;
 8000f52:	e012      	b.n	8000f7a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d105      	bne.n	8000f68 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	611a      	str	r2, [r3, #16]
          break;
 8000f66:	e008      	b.n	8000f7a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	615a      	str	r2, [r3, #20]
          break;
 8000f72:	e002      	b.n	8000f7a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
          break;
 8000f78:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2bff      	cmp	r3, #255	; 0xff
 8000f7e:	d801      	bhi.n	8000f84 <HAL_GPIO_Init+0xec>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	e001      	b.n	8000f88 <HAL_GPIO_Init+0xf0>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3304      	adds	r3, #4
 8000f88:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2bff      	cmp	r3, #255	; 0xff
 8000f8e:	d802      	bhi.n	8000f96 <HAL_GPIO_Init+0xfe>
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x104>
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	401a      	ands	r2, r3
 8000fae:	6a39      	ldr	r1, [r7, #32]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 8096 	beq.w	80010f6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fca:	4b59      	ldr	r3, [pc, #356]	; (8001130 <HAL_GPIO_Init+0x298>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4a58      	ldr	r2, [pc, #352]	; (8001130 <HAL_GPIO_Init+0x298>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	4b56      	ldr	r3, [pc, #344]	; (8001130 <HAL_GPIO_Init+0x298>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fe2:	4a54      	ldr	r2, [pc, #336]	; (8001134 <HAL_GPIO_Init+0x29c>)
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4013      	ands	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4b      	ldr	r2, [pc, #300]	; (8001138 <HAL_GPIO_Init+0x2a0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x19e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4a      	ldr	r2, [pc, #296]	; (800113c <HAL_GPIO_Init+0x2a4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x19a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a49      	ldr	r2, [pc, #292]	; (8001140 <HAL_GPIO_Init+0x2a8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x196>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a48      	ldr	r2, [pc, #288]	; (8001144 <HAL_GPIO_Init+0x2ac>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x192>
 8001026:	2303      	movs	r3, #3
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x1a0>
 800102a:	2304      	movs	r3, #4
 800102c:	e004      	b.n	8001038 <HAL_GPIO_Init+0x1a0>
 800102e:	2302      	movs	r3, #2
 8001030:	e002      	b.n	8001038 <HAL_GPIO_Init+0x1a0>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x1a0>
 8001036:	2300      	movs	r3, #0
 8001038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103a:	f002 0203 	and.w	r2, r2, #3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4093      	lsls	r3, r2
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001048:	493a      	ldr	r1, [pc, #232]	; (8001134 <HAL_GPIO_Init+0x29c>)
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001062:	4b39      	ldr	r3, [pc, #228]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4938      	ldr	r1, [pc, #224]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]
 800106e:	e006      	b.n	800107e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001070:	4b35      	ldr	r3, [pc, #212]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	43db      	mvns	r3, r3
 8001078:	4933      	ldr	r1, [pc, #204]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 800107a:	4013      	ands	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800108a:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	492e      	ldr	r1, [pc, #184]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]
 8001096:	e006      	b.n	80010a6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	43db      	mvns	r3, r3
 80010a0:	4929      	ldr	r1, [pc, #164]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	4924      	ldr	r1, [pc, #144]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	608b      	str	r3, [r1, #8]
 80010be:	e006      	b.n	80010ce <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	491f      	ldr	r1, [pc, #124]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	491a      	ldr	r1, [pc, #104]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60cb      	str	r3, [r1, #12]
 80010e6:	e006      	b.n	80010f6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	4915      	ldr	r1, [pc, #84]	; (8001148 <HAL_GPIO_Init+0x2b0>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	3301      	adds	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	fa22 f303 	lsr.w	r3, r2, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	f47f aed0 	bne.w	8000eac <HAL_GPIO_Init+0x14>
  }
}
 800110c:	bf00      	nop
 800110e:	372c      	adds	r7, #44	; 0x2c
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	10210000 	.word	0x10210000
 800111c:	10110000 	.word	0x10110000
 8001120:	10120000 	.word	0x10120000
 8001124:	10310000 	.word	0x10310000
 8001128:	10320000 	.word	0x10320000
 800112c:	10220000 	.word	0x10220000
 8001130:	40021000 	.word	0x40021000
 8001134:	40010000 	.word	0x40010000
 8001138:	40010800 	.word	0x40010800
 800113c:	40010c00 	.word	0x40010c00
 8001140:	40011000 	.word	0x40011000
 8001144:	40011400 	.word	0x40011400
 8001148:	40010400 	.word	0x40010400

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001168:	e003      	b.n	8001172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	611a      	str	r2, [r3, #16]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117e:	b08b      	sub	sp, #44	; 0x2c
 8001180:	af06      	add	r7, sp, #24
 8001182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e0fd      	b.n	800138a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d106      	bne.n	80011a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f006 fb28 	bl	80077f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2203      	movs	r2, #3
 80011ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 fd97 	bl	8003ce8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	687e      	ldr	r6, [r7, #4]
 80011c2:	466d      	mov	r5, sp
 80011c4:	f106 0410 	add.w	r4, r6, #16
 80011c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	602b      	str	r3, [r5, #0]
 80011d0:	1d33      	adds	r3, r6, #4
 80011d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f002 fd61 	bl	8003c9c <USB_CoreInit>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2202      	movs	r2, #2
 80011e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0ce      	b.n	800138a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 fd92 	bl	8003d1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e04c      	b.n	8001298 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	440b      	add	r3, r1
 800120e:	3301      	adds	r3, #1
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	440b      	add	r3, r1
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	b298      	uxth	r0, r3
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	440b      	add	r3, r1
 800123a:	3336      	adds	r3, #54	; 0x36
 800123c:	4602      	mov	r2, r0
 800123e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	3303      	adds	r3, #3
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	3338      	adds	r3, #56	; 0x38
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	333c      	adds	r3, #60	; 0x3c
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	440b      	add	r3, r1
 800128c:	3340      	adds	r3, #64	; 0x40
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	3301      	adds	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3ad      	bcc.n	80011fe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e044      	b.n	8001332 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	440b      	add	r3, r1
 80012b6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	440b      	add	r3, r1
 80012cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	440b      	add	r3, r1
 80012e2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	440b      	add	r3, r1
 800130e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	440b      	add	r3, r1
 8001324:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	3301      	adds	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3b5      	bcc.n	80012a8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	687e      	ldr	r6, [r7, #4]
 8001344:	466d      	mov	r5, sp
 8001346:	f106 0410 	add.w	r4, r6, #16
 800134a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	602b      	str	r3, [r5, #0]
 8001352:	1d33      	adds	r3, r6, #4
 8001354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001356:	6838      	ldr	r0, [r7, #0]
 8001358:	f002 fcec 	bl	8003d34 <USB_DevInit>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2202      	movs	r2, #2
 8001366:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00d      	b.n	800138a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f004 fc86 	bl	8005c94 <USB_DevDisconnect>

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001392 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_PCD_Start+0x16>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e016      	b.n	80013d6 <HAL_PCD_Start+0x44>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 fc81 	bl	8003cbc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80013ba:	2101      	movs	r1, #1
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f006 fc8e 	bl	8007cde <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 fc5a 	bl	8005c80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b088      	sub	sp, #32
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f004 fc5c 	bl	8005ca8 <USB_ReadInterrupts>
 80013f0:	4603      	mov	r3, r0
 80013f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013fa:	d102      	bne.n	8001402 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 fb61 	bl	8001ac4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fc4e 	bl	8005ca8 <USB_ReadInterrupts>
 800140c:	4603      	mov	r3, r0
 800140e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001416:	d112      	bne.n	800143e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001420:	b29a      	uxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800142a:	b292      	uxth	r2, r2
 800142c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f006 fa5c 	bl	80078ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001436:	2100      	movs	r1, #0
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f925 	bl	8001688 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f004 fc30 	bl	8005ca8 <USB_ReadInterrupts>
 8001448:	4603      	mov	r3, r0
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001452:	d10b      	bne.n	800146c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800145c:	b29a      	uxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001466:	b292      	uxth	r2, r2
 8001468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f004 fc19 	bl	8005ca8 <USB_ReadInterrupts>
 8001476:	4603      	mov	r3, r0
 8001478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800147c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001480:	d10b      	bne.n	800149a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001494:	b292      	uxth	r2, r2
 8001496:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 fc02 	bl	8005ca8 <USB_ReadInterrupts>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ae:	d126      	bne.n	80014fe <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0204 	bic.w	r2, r2, #4
 80014c2:	b292      	uxth	r2, r2
 80014c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0208 	bic.w	r2, r2, #8
 80014da:	b292      	uxth	r2, r2
 80014dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f006 fa3d 	bl	8007960 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014f8:	b292      	uxth	r2, r2
 80014fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fbd0 	bl	8005ca8 <USB_ReadInterrupts>
 8001508:	4603      	mov	r3, r0
 800150a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800150e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001512:	f040 8084 	bne.w	800161e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001516:	2300      	movs	r3, #0
 8001518:	77fb      	strb	r3, [r7, #31]
 800151a:	e011      	b.n	8001540 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	7ffb      	ldrb	r3, [r7, #31]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	441a      	add	r2, r3
 8001528:	7ffb      	ldrb	r3, [r7, #31]
 800152a:	8812      	ldrh	r2, [r2, #0]
 800152c:	b292      	uxth	r2, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	f107 0120 	add.w	r1, r7, #32
 8001534:	440b      	add	r3, r1
 8001536:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800153a:	7ffb      	ldrb	r3, [r7, #31]
 800153c:	3301      	adds	r3, #1
 800153e:	77fb      	strb	r3, [r7, #31]
 8001540:	7ffb      	ldrb	r3, [r7, #31]
 8001542:	2b07      	cmp	r3, #7
 8001544:	d9ea      	bls.n	800151c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800154e:	b29a      	uxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	b292      	uxth	r2, r2
 800155a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001566:	b29a      	uxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0201 	bic.w	r2, r2, #1
 8001570:	b292      	uxth	r2, r2
 8001572:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001576:	bf00      	nop
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001580:	b29b      	uxth	r3, r3
 8001582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f6      	beq.n	8001578 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001592:	b29a      	uxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800159c:	b292      	uxth	r2, r2
 800159e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	77fb      	strb	r3, [r7, #31]
 80015a6:	e010      	b.n	80015ca <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80015a8:	7ffb      	ldrb	r3, [r7, #31]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	4611      	mov	r1, r2
 80015b0:	7ffa      	ldrb	r2, [r7, #31]
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	440a      	add	r2, r1
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	f107 0120 	add.w	r1, r7, #32
 80015bc:	440b      	add	r3, r1
 80015be:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80015c2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80015c4:	7ffb      	ldrb	r3, [r7, #31]
 80015c6:	3301      	adds	r3, #1
 80015c8:	77fb      	strb	r3, [r7, #31]
 80015ca:	7ffb      	ldrb	r3, [r7, #31]
 80015cc:	2b07      	cmp	r3, #7
 80015ce:	d9eb      	bls.n	80015a8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0208 	orr.w	r2, r2, #8
 80015e2:	b292      	uxth	r2, r2
 80015e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015fa:	b292      	uxth	r2, r2
 80015fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001608:	b29a      	uxth	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0204 	orr.w	r2, r2, #4
 8001612:	b292      	uxth	r2, r2
 8001614:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f006 f987 	bl	800792c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f004 fb40 	bl	8005ca8 <USB_ReadInterrupts>
 8001628:	4603      	mov	r3, r0
 800162a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800162e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001632:	d10e      	bne.n	8001652 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800163c:	b29a      	uxth	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001646:	b292      	uxth	r2, r2
 8001648:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f006 f940 	bl	80078d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f004 fb26 	bl	8005ca8 <USB_ReadInterrupts>
 800165c:	4603      	mov	r3, r0
 800165e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001666:	d10b      	bne.n	8001680 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001670:	b29a      	uxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800167a:	b292      	uxth	r2, r2
 800167c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001680:	bf00      	nop
 8001682:	3720      	adds	r7, #32
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <HAL_PCD_SetAddress+0x1a>
 800169e:	2302      	movs	r3, #2
 80016a0:	e013      	b.n	80016ca <HAL_PCD_SetAddress+0x42>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	78fa      	ldrb	r2, [r7, #3]
 80016ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 facd 	bl	8005c5a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b084      	sub	sp, #16
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	4608      	mov	r0, r1
 80016dc:	4611      	mov	r1, r2
 80016de:	461a      	mov	r2, r3
 80016e0:	4603      	mov	r3, r0
 80016e2:	70fb      	strb	r3, [r7, #3]
 80016e4:	460b      	mov	r3, r1
 80016e6:	803b      	strh	r3, [r7, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da0e      	bge.n	8001716 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2201      	movs	r2, #1
 8001712:	705a      	strb	r2, [r3, #1]
 8001714:	e00e      	b.n	8001734 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	f003 0207 	and.w	r2, r3, #7
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	b2da      	uxtb	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001740:	883a      	ldrh	r2, [r7, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	78ba      	ldrb	r2, [r7, #2]
 800174a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	785b      	ldrb	r3, [r3, #1]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d004      	beq.n	800175e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800175e:	78bb      	ldrb	r3, [r7, #2]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d102      	bne.n	800176a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_PCD_EP_Open+0xa6>
 8001774:	2302      	movs	r3, #2
 8001776:	e00e      	b.n	8001796 <HAL_PCD_EP_Open+0xc4>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68f9      	ldr	r1, [r7, #12]
 8001786:	4618      	mov	r0, r3
 8001788:	f002 faf4 	bl	8003d74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001794:	7afb      	ldrb	r3, [r7, #11]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	da0e      	bge.n	80017d0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2201      	movs	r2, #1
 80017cc:	705a      	strb	r2, [r3, #1]
 80017ce:	e00e      	b.n	80017ee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	f003 0207 	and.w	r2, r3, #7
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_PCD_EP_Close+0x6a>
 8001804:	2302      	movs	r3, #2
 8001806:	e00e      	b.n	8001826 <HAL_PCD_EP_Close+0x88>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68f9      	ldr	r1, [r7, #12]
 8001816:	4618      	mov	r0, r3
 8001818:	f002 fe16 	bl	8004448 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	607a      	str	r2, [r7, #4]
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	460b      	mov	r3, r1
 800183c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800183e:	7afb      	ldrb	r3, [r7, #11]
 8001840:	f003 0207 	and.w	r2, r3, #7
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2200      	movs	r2, #0
 800186c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800186e:	7afb      	ldrb	r3, [r7, #11]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	b2da      	uxtb	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800187a:	7afb      	ldrb	r3, [r7, #11]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	2b00      	cmp	r3, #0
 8001882:	d106      	bne.n	8001892 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6979      	ldr	r1, [r7, #20]
 800188a:	4618      	mov	r0, r3
 800188c:	f002 ffc8 	bl	8004820 <USB_EPStartXfer>
 8001890:	e005      	b.n	800189e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6979      	ldr	r1, [r7, #20]
 8001898:	4618      	mov	r0, r3
 800189a:	f002 ffc1 	bl	8004820 <USB_EPStartXfer>
  }

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 0207 	and.w	r2, r3, #7
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	460b      	mov	r3, r1
 80018e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018e6:	7afb      	ldrb	r3, [r7, #11]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2201      	movs	r2, #1
 8001920:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001922:	7afb      	ldrb	r3, [r7, #11]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	b2da      	uxtb	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800192e:	7afb      	ldrb	r3, [r7, #11]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	2b00      	cmp	r3, #0
 8001936:	d106      	bne.n	8001946 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6979      	ldr	r1, [r7, #20]
 800193e:	4618      	mov	r0, r3
 8001940:	f002 ff6e 	bl	8004820 <USB_EPStartXfer>
 8001944:	e005      	b.n	8001952 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6979      	ldr	r1, [r7, #20]
 800194c:	4618      	mov	r0, r3
 800194e:	f002 ff67 	bl	8004820 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	f003 0207 	and.w	r2, r3, #7
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	429a      	cmp	r2, r3
 8001974:	d901      	bls.n	800197a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e04c      	b.n	8001a14 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800197a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800197e:	2b00      	cmp	r3, #0
 8001980:	da0e      	bge.n	80019a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2201      	movs	r2, #1
 800199c:	705a      	strb	r2, [r3, #1]
 800199e:	e00c      	b.n	80019ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_PCD_EP_SetStall+0x7e>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e01c      	b.n	8001a14 <HAL_PCD_EP_SetStall+0xb8>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68f9      	ldr	r1, [r7, #12]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f004 f839 	bl	8005a60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d108      	bne.n	8001a0a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001a02:	4619      	mov	r1, r3
 8001a04:	4610      	mov	r0, r2
 8001a06:	f004 f95e 	bl	8005cc6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	f003 020f 	and.w	r2, r3, #15
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d901      	bls.n	8001a3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e040      	b.n	8001abc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	da0e      	bge.n	8001a60 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	705a      	strb	r2, [r3, #1]
 8001a5e:	e00e      	b.n	8001a7e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	f003 0207 	and.w	r2, r3, #7
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_PCD_EP_ClrStall+0x82>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e00e      	b.n	8001abc <HAL_PCD_EP_ClrStall+0xa0>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68f9      	ldr	r1, [r7, #12]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f004 f827 	bl	8005b00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08e      	sub	sp, #56	; 0x38
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001acc:	e2df      	b.n	800208e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ad6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ad8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001ae4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f040 8158 	bne.w	8001d9e <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001aee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d152      	bne.n	8001b9e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b08:	81fb      	strh	r3, [r7, #14]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	89fb      	ldrh	r3, [r7, #14]
 8001b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3328      	adds	r3, #40	; 0x28
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	3302      	adds	r3, #2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	441a      	add	r2, r3
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f005 fe9d 	bl	800789e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 828e 	beq.w	800208e <PCD_EP_ISR_Handler+0x5ca>
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f040 8289 	bne.w	800208e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b292      	uxth	r2, r2
 8001b90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b9c:	e277      	b.n	800208e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d034      	beq.n	8001c22 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3306      	adds	r3, #6
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	f004 f8b4 	bl	8005d64 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c08:	4013      	ands	r3, r2
 8001c0a:	823b      	strh	r3, [r7, #16]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	8a3a      	ldrh	r2, [r7, #16]
 8001c12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c16:	b292      	uxth	r2, r2
 8001c18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f005 fe12 	bl	8007844 <HAL_PCD_SetupStageCallback>
 8001c20:	e235      	b.n	800208e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c22:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f280 8231 	bge.w	800208e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c38:	4013      	ands	r3, r2
 8001c3a:	83bb      	strh	r3, [r7, #28]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	8bba      	ldrh	r2, [r7, #28]
 8001c42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c46:	b292      	uxth	r2, r2
 8001c48:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3306      	adds	r3, #6
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d019      	beq.n	8001cb2 <PCD_EP_ISR_Handler+0x1ee>
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d015      	beq.n	8001cb2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	6959      	ldr	r1, [r3, #20]
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	f004 f864 	bl	8005d64 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	441a      	add	r2, r3
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001caa:	2100      	movs	r1, #0
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f005 fddb 	bl	8007868 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d112      	bne.n	8001d00 <PCD_EP_ISR_Handler+0x23c>
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	801a      	strh	r2, [r3, #0]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	801a      	strh	r2, [r3, #0]
 8001cfe:	e02f      	b.n	8001d60 <PCD_EP_ISR_Handler+0x29c>
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b3e      	cmp	r3, #62	; 0x3e
 8001d06:	d813      	bhi.n	8001d30 <PCD_EP_ISR_Handler+0x26c>
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	085b      	lsrs	r3, r3, #1
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <PCD_EP_ISR_Handler+0x25e>
 8001d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1e:	3301      	adds	r3, #1
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	029b      	lsls	r3, r3, #10
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	801a      	strh	r2, [r3, #0]
 8001d2e:	e017      	b.n	8001d60 <PCD_EP_ISR_Handler+0x29c>
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	095b      	lsrs	r3, r3, #5
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <PCD_EP_ISR_Handler+0x286>
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d46:	3b01      	subs	r3, #1
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	029b      	lsls	r3, r3, #10
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d70:	827b      	strh	r3, [r7, #18]
 8001d72:	8a7b      	ldrh	r3, [r7, #18]
 8001d74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d78:	827b      	strh	r3, [r7, #18]
 8001d7a:	8a7b      	ldrh	r3, [r7, #18]
 8001d7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d80:	827b      	strh	r3, [r7, #18]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	8a7b      	ldrh	r3, [r7, #18]
 8001d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	8013      	strh	r3, [r2, #0]
 8001d9c:	e177      	b.n	800208e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001db0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f280 80ea 	bge.w	8001f8e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	853b      	strh	r3, [r7, #40]	; 0x28
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001de4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001de8:	b292      	uxth	r2, r2
 8001dea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001dec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	7b1b      	ldrb	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d122      	bne.n	8001e50 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3306      	adds	r3, #6
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e32:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001e34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8087 	beq.w	8001f4a <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	6959      	ldr	r1, [r3, #20]
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	88da      	ldrh	r2, [r3, #6]
 8001e48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e4a:	f003 ff8b 	bl	8005d64 <USB_ReadPMA>
 8001e4e:	e07c      	b.n	8001f4a <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	78db      	ldrb	r3, [r3, #3]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d108      	bne.n	8001e6a <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f923 	bl	80020aa <HAL_PCD_EP_DB_Receive>
 8001e64:	4603      	mov	r3, r0
 8001e66:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e68:	e06f      	b.n	8001f4a <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e84:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	441a      	add	r2, r3
 8001e94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d021      	beq.n	8001f08 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eec:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001eee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d02a      	beq.n	8001f4a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	6959      	ldr	r1, [r3, #20]
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	891a      	ldrh	r2, [r3, #8]
 8001f00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f02:	f003 ff2f 	bl	8005d64 <USB_ReadPMA>
 8001f06:	e020      	b.n	8001f4a <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3306      	adds	r3, #6
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f30:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	6959      	ldr	r1, [r3, #20]
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	895a      	ldrh	r2, [r3, #10]
 8001f44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f46:	f003 ff0d 	bl	8005d64 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	69da      	ldr	r2, [r3, #28]
 8001f4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f50:	441a      	add	r2, r3
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f5c:	441a      	add	r2, r3
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d004      	beq.n	8001f74 <PCD_EP_ISR_Handler+0x4b0>
 8001f6a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d206      	bcs.n	8001f82 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f005 fc74 	bl	8007868 <HAL_PCD_DataOutStageCallback>
 8001f80:	e005      	b.n	8001f8e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f002 fc49 	bl	8004820 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d07a      	beq.n	800208e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc6:	843b      	strh	r3, [r7, #32]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	441a      	add	r2, r3
 8001fd6:	8c3b      	ldrh	r3, [r7, #32]
 8001fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	78db      	ldrb	r3, [r3, #3]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d108      	bne.n	8001ffe <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d146      	bne.n	8002082 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ff4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d141      	bne.n	8002082 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	3302      	adds	r3, #2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	4413      	add	r3, r2
 800201c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002026:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	8bfb      	ldrh	r3, [r7, #30]
 800202e:	429a      	cmp	r2, r3
 8002030:	d906      	bls.n	8002040 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	699a      	ldr	r2, [r3, #24]
 8002036:	8bfb      	ldrh	r3, [r7, #30]
 8002038:	1ad2      	subs	r2, r2, r3
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	619a      	str	r2, [r3, #24]
 800203e:	e002      	b.n	8002046 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4619      	mov	r1, r3
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f005 fc22 	bl	800789e <HAL_PCD_DataInStageCallback>
 800205a:	e018      	b.n	800208e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	8bfb      	ldrh	r3, [r7, #30]
 8002062:	441a      	add	r2, r3
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	8bfb      	ldrh	r3, [r7, #30]
 800206e:	441a      	add	r2, r3
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800207a:	4618      	mov	r0, r3
 800207c:	f002 fbd0 	bl	8004820 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002080:	e005      	b.n	800208e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002082:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002084:	461a      	mov	r2, r3
 8002086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f91b 	bl	80022c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002096:	b29b      	uxth	r3, r3
 8002098:	b21b      	sxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	f6ff ad17 	blt.w	8001ace <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3738      	adds	r7, #56	; 0x38
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b088      	sub	sp, #32
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	4613      	mov	r3, r2
 80020b6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d07e      	beq.n	80021c0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	3302      	adds	r3, #2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	8b7b      	ldrh	r3, [r7, #26]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d306      	bcc.n	8002104 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	8b7b      	ldrh	r3, [r7, #26]
 80020fc:	1ad2      	subs	r2, r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	619a      	str	r2, [r3, #24]
 8002102:	e002      	b.n	800210a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d123      	bne.n	800215a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212c:	833b      	strh	r3, [r7, #24]
 800212e:	8b3b      	ldrh	r3, [r7, #24]
 8002130:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002134:	833b      	strh	r3, [r7, #24]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	441a      	add	r2, r3
 8002144:	8b3b      	ldrh	r3, [r7, #24]
 8002146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800214a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800214e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002156:	b29b      	uxth	r3, r3
 8002158:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01f      	beq.n	80021a4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800217a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217e:	82fb      	strh	r3, [r7, #22]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	441a      	add	r2, r3
 800218e:	8afb      	ldrh	r3, [r7, #22]
 8002190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021a4:	8b7b      	ldrh	r3, [r7, #26]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8087 	beq.w	80022ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	6959      	ldr	r1, [r3, #20]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	891a      	ldrh	r2, [r3, #8]
 80021b8:	8b7b      	ldrh	r3, [r7, #26]
 80021ba:	f003 fdd3 	bl	8005d64 <USB_ReadPMA>
 80021be:	e07c      	b.n	80022ba <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	3306      	adds	r3, #6
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	8b7b      	ldrh	r3, [r7, #26]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d306      	bcc.n	8002202 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	8b7b      	ldrh	r3, [r7, #26]
 80021fa:	1ad2      	subs	r2, r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	619a      	str	r2, [r3, #24]
 8002200:	e002      	b.n	8002208 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d123      	bne.n	8002258 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222a:	83fb      	strh	r3, [r7, #30]
 800222c:	8bfb      	ldrh	r3, [r7, #30]
 800222e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002232:	83fb      	strh	r3, [r7, #30]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	441a      	add	r2, r3
 8002242:	8bfb      	ldrh	r3, [r7, #30]
 8002244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800224c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002254:	b29b      	uxth	r3, r3
 8002256:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d11f      	bne.n	80022a2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227c:	83bb      	strh	r3, [r7, #28]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	441a      	add	r2, r3
 800228c:	8bbb      	ldrh	r3, [r7, #28]
 800228e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800229e:	b29b      	uxth	r3, r3
 80022a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022a2:	8b7b      	ldrh	r3, [r7, #26]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	6959      	ldr	r1, [r3, #20]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	895a      	ldrh	r2, [r3, #10]
 80022b4:	8b7b      	ldrh	r3, [r7, #26]
 80022b6:	f003 fd55 	bl	8005d64 <USB_ReadPMA>
    }
  }

  return count;
 80022ba:	8b7b      	ldrh	r3, [r7, #26]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b092      	sub	sp, #72	; 0x48
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8132 	beq.w	8002542 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	3302      	adds	r3, #2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002306:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	699a      	ldr	r2, [r3, #24]
 800230c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800230e:	429a      	cmp	r2, r3
 8002310:	d906      	bls.n	8002320 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002318:	1ad2      	subs	r2, r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	619a      	str	r2, [r3, #24]
 800231e:	e002      	b.n	8002326 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2200      	movs	r2, #0
 8002324:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d12c      	bne.n	8002388 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	4619      	mov	r1, r3
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f005 fab2 	bl	800789e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 822f 	beq.w	80027a4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800235c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002360:	827b      	strh	r3, [r7, #18]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	441a      	add	r2, r3
 8002370:	8a7b      	ldrh	r3, [r7, #18]
 8002372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800237a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800237e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002382:	b29b      	uxth	r3, r3
 8002384:	8013      	strh	r3, [r2, #0]
 8002386:	e20d      	b.n	80027a4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01f      	beq.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ac:	84bb      	strh	r3, [r7, #36]	; 0x24
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	441a      	add	r2, r3
 80023bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023d8:	2b01      	cmp	r3, #1
 80023da:	f040 81e3 	bne.w	80027a4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023e4:	441a      	add	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023f0:	441a      	add	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	6a1a      	ldr	r2, [r3, #32]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d309      	bcc.n	8002416 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240e:	1ad2      	subs	r2, r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	621a      	str	r2, [r3, #32]
 8002414:	e014      	b.n	8002440 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800241e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002420:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800242a:	e009      	b.n	8002440 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d155      	bne.n	80024f4 <HAL_PCD_EP_DB_Transmit+0x230>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002456:	b29b      	uxth	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4413      	add	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	011a      	lsls	r2, r3, #4
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4413      	add	r3, r2
 800246a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002472:	2b00      	cmp	r3, #0
 8002474:	d112      	bne.n	800249c <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002480:	b29a      	uxth	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	801a      	strh	r2, [r3, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002494:	b29a      	uxth	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	801a      	strh	r2, [r3, #0]
 800249a:	e047      	b.n	800252c <HAL_PCD_EP_DB_Transmit+0x268>
 800249c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249e:	2b3e      	cmp	r3, #62	; 0x3e
 80024a0:	d811      	bhi.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x202>
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	3301      	adds	r3, #1
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	029b      	lsls	r3, r3, #10
 80024be:	b29a      	uxth	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	801a      	strh	r2, [r3, #0]
 80024c4:	e032      	b.n	800252c <HAL_PCD_EP_DB_Transmit+0x268>
 80024c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80024cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <HAL_PCD_EP_DB_Transmit+0x218>
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	3b01      	subs	r3, #1
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024de:	b29b      	uxth	r3, r3
 80024e0:	029b      	lsls	r3, r3, #10
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	801a      	strh	r2, [r3, #0]
 80024f2:	e01b      	b.n	800252c <HAL_PCD_EP_DB_Transmit+0x268>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	785b      	ldrb	r3, [r3, #1]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d117      	bne.n	800252c <HAL_PCD_EP_DB_Transmit+0x268>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	623b      	str	r3, [r7, #32]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	4413      	add	r3, r2
 8002512:	623b      	str	r3, [r7, #32]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	011a      	lsls	r2, r3, #4
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	4413      	add	r3, r2
 800251e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002526:	b29a      	uxth	r2, r3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	6959      	ldr	r1, [r3, #20]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	891a      	ldrh	r2, [r3, #8]
 8002538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253a:	b29b      	uxth	r3, r3
 800253c:	f003 fbce 	bl	8005cdc <USB_WritePMA>
 8002540:	e130      	b.n	80027a4 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254a:	b29b      	uxth	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	3306      	adds	r3, #6
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800256a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002572:	429a      	cmp	r2, r3
 8002574:	d306      	bcc.n	8002584 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	699a      	ldr	r2, [r3, #24]
 800257a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800257c:	1ad2      	subs	r2, r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	619a      	str	r2, [r3, #24]
 8002582:	e002      	b.n	800258a <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d12c      	bne.n	80025ec <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4619      	mov	r1, r3
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f005 f980 	bl	800789e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f040 80fd 	bne.w	80027a4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	441a      	add	r2, r3
 80025d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	8013      	strh	r3, [r2, #0]
 80025ea:	e0db      	b.n	80027a4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11f      	bne.n	8002636 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800260c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002610:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	441a      	add	r2, r3
 8002620:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800262a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800262e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002632:	b29b      	uxth	r3, r3
 8002634:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800263c:	2b01      	cmp	r3, #1
 800263e:	f040 80b1 	bne.w	80027a4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002648:	441a      	add	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	69da      	ldr	r2, [r3, #28]
 8002652:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002654:	441a      	add	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6a1a      	ldr	r2, [r3, #32]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	429a      	cmp	r2, r3
 8002664:	d309      	bcc.n	800267a <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6a1a      	ldr	r2, [r3, #32]
 8002670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002672:	1ad2      	subs	r2, r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	621a      	str	r2, [r3, #32]
 8002678:	e014      	b.n	80026a4 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002682:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002684:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800268e:	e009      	b.n	80026a4 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2200      	movs	r2, #0
 800269a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	785b      	ldrb	r3, [r3, #1]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d155      	bne.n	800275e <HAL_PCD_EP_DB_Transmit+0x49a>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	647b      	str	r3, [r7, #68]	; 0x44
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c6:	4413      	add	r3, r2
 80026c8:	647b      	str	r3, [r7, #68]	; 0x44
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	011a      	lsls	r2, r3, #4
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	4413      	add	r3, r2
 80026d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026d8:	643b      	str	r3, [r7, #64]	; 0x40
 80026da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d112      	bne.n	8002706 <HAL_PCD_EP_DB_Transmit+0x442>
 80026e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ee:	801a      	strh	r2, [r3, #0]
 80026f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fe:	b29a      	uxth	r2, r3
 8002700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	e044      	b.n	8002790 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002708:	2b3e      	cmp	r3, #62	; 0x3e
 800270a:	d811      	bhi.n	8002730 <HAL_PCD_EP_DB_Transmit+0x46c>
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	085b      	lsrs	r3, r3, #1
 8002710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_PCD_EP_DB_Transmit+0x45e>
 800271c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800271e:	3301      	adds	r3, #1
 8002720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002724:	b29b      	uxth	r3, r3
 8002726:	029b      	lsls	r3, r3, #10
 8002728:	b29a      	uxth	r2, r3
 800272a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	e02f      	b.n	8002790 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <HAL_PCD_EP_DB_Transmit+0x482>
 8002740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002742:	3b01      	subs	r3, #1
 8002744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002748:	b29b      	uxth	r3, r3
 800274a:	029b      	lsls	r3, r3, #10
 800274c:	b29b      	uxth	r3, r3
 800274e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002756:	b29a      	uxth	r2, r3
 8002758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275a:	801a      	strh	r2, [r3, #0]
 800275c:	e018      	b.n	8002790 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	785b      	ldrb	r3, [r3, #1]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d114      	bne.n	8002790 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276e:	b29b      	uxth	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	4413      	add	r3, r2
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	011a      	lsls	r2, r3, #4
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	4413      	add	r3, r2
 8002782:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
 8002788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278a:	b29a      	uxth	r2, r3
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	6959      	ldr	r1, [r3, #20]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	895a      	ldrh	r2, [r3, #10]
 800279c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f003 fa9c 	bl	8005cdc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027be:	823b      	strh	r3, [r7, #16]
 80027c0:	8a3b      	ldrh	r3, [r7, #16]
 80027c2:	f083 0310 	eor.w	r3, r3, #16
 80027c6:	823b      	strh	r3, [r7, #16]
 80027c8:	8a3b      	ldrh	r3, [r7, #16]
 80027ca:	f083 0320 	eor.w	r3, r3, #32
 80027ce:	823b      	strh	r3, [r7, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	441a      	add	r2, r3
 80027de:	8a3b      	ldrh	r3, [r7, #16]
 80027e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3748      	adds	r7, #72	; 0x48
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80027fe:	b480      	push	{r7}
 8002800:	b087      	sub	sp, #28
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	817b      	strh	r3, [r7, #10]
 800280c:	4613      	mov	r3, r2
 800280e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002810:	897b      	ldrh	r3, [r7, #10]
 8002812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00b      	beq.n	8002834 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800281c:	897b      	ldrh	r3, [r7, #10]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e009      	b.n	8002848 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002834:	897a      	ldrh	r2, [r7, #10]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4413      	add	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002848:	893b      	ldrh	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d107      	bne.n	800285e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2200      	movs	r2, #0
 8002852:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	b29a      	uxth	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	80da      	strh	r2, [r3, #6]
 800285c:	e00b      	b.n	8002876 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2201      	movs	r2, #1
 8002862:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	b29a      	uxth	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	0c1b      	lsrs	r3, r3, #16
 8002870:	b29a      	uxth	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
	...

08002884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e26c      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8087 	beq.w	80029b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a4:	4b92      	ldr	r3, [pc, #584]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d00c      	beq.n	80028ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028b0:	4b8f      	ldr	r3, [pc, #572]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d112      	bne.n	80028e2 <HAL_RCC_OscConfig+0x5e>
 80028bc:	4b8c      	ldr	r3, [pc, #560]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d10b      	bne.n	80028e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ca:	4b89      	ldr	r3, [pc, #548]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d06c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x12c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d168      	bne.n	80029b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e246      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x76>
 80028ec:	4b80      	ldr	r3, [pc, #512]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a7f      	ldr	r2, [pc, #508]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	e02e      	b.n	8002958 <HAL_RCC_OscConfig+0xd4>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x98>
 8002902:	4b7b      	ldr	r3, [pc, #492]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a7a      	ldr	r2, [pc, #488]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4b78      	ldr	r3, [pc, #480]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a77      	ldr	r2, [pc, #476]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e01d      	b.n	8002958 <HAL_RCC_OscConfig+0xd4>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0xbc>
 8002926:	4b72      	ldr	r3, [pc, #456]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a71      	ldr	r2, [pc, #452]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0xd4>
 8002940:	4b6b      	ldr	r3, [pc, #428]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a6a      	ldr	r2, [pc, #424]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b68      	ldr	r3, [pc, #416]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a67      	ldr	r2, [pc, #412]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fe f960 	bl	8000c24 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe f95c 	bl	8000c24 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e1fa      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0xe4>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe f94c 	bl	8000c24 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002990:	f7fe f948 	bl	8000c24 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1e6      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x10c>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d063      	beq.n	8002a86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029be:	4b4c      	ldr	r3, [pc, #304]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029ca:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d11c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x18c>
 80029d6:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d116      	bne.n	8002a10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	4b43      	ldr	r3, [pc, #268]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_RCC_OscConfig+0x176>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1ba      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4939      	ldr	r1, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	e03a      	b.n	8002a86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a18:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe f901 	bl	8000c24 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a26:	f7fe f8fd 	bl	8000c24 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e19b      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a44:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4927      	ldr	r1, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5a:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe f8e0 	bl	8000c24 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a68:	f7fe f8dc 	bl	8000c24 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e17a      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d03a      	beq.n	8002b08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d019      	beq.n	8002ace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9a:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa0:	f7fe f8c0 	bl	8000c24 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe f8bc 	bl	8000c24 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e15a      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f000 faa8 	bl	800301c <RCC_Delay>
 8002acc:	e01c      	b.n	8002b08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad4:	f7fe f8a6 	bl	8000c24 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ada:	e00f      	b.n	8002afc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002adc:	f7fe f8a2 	bl	8000c24 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d908      	bls.n	8002afc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e140      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	42420000 	.word	0x42420000
 8002af8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afc:	4b9e      	ldr	r3, [pc, #632]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e9      	bne.n	8002adc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80a6 	beq.w	8002c62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b1a:	4b97      	ldr	r3, [pc, #604]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10d      	bne.n	8002b42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	4b94      	ldr	r3, [pc, #592]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	4a93      	ldr	r2, [pc, #588]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b30:	61d3      	str	r3, [r2, #28]
 8002b32:	4b91      	ldr	r3, [pc, #580]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b8e      	ldr	r3, [pc, #568]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d118      	bne.n	8002b80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4e:	4b8b      	ldr	r3, [pc, #556]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a8a      	ldr	r2, [pc, #552]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5a:	f7fe f863 	bl	8000c24 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b62:	f7fe f85f 	bl	8000c24 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b64      	cmp	r3, #100	; 0x64
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e0fd      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	4b81      	ldr	r3, [pc, #516]	; (8002d7c <HAL_RCC_OscConfig+0x4f8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d106      	bne.n	8002b96 <HAL_RCC_OscConfig+0x312>
 8002b88:	4b7b      	ldr	r3, [pc, #492]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4a7a      	ldr	r2, [pc, #488]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6213      	str	r3, [r2, #32]
 8002b94:	e02d      	b.n	8002bf2 <HAL_RCC_OscConfig+0x36e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x334>
 8002b9e:	4b76      	ldr	r3, [pc, #472]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a75      	ldr	r2, [pc, #468]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	6213      	str	r3, [r2, #32]
 8002baa:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a72      	ldr	r2, [pc, #456]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	6213      	str	r3, [r2, #32]
 8002bb6:	e01c      	b.n	8002bf2 <HAL_RCC_OscConfig+0x36e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d10c      	bne.n	8002bda <HAL_RCC_OscConfig+0x356>
 8002bc0:	4b6d      	ldr	r3, [pc, #436]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4a6c      	ldr	r2, [pc, #432]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002bc6:	f043 0304 	orr.w	r3, r3, #4
 8002bca:	6213      	str	r3, [r2, #32]
 8002bcc:	4b6a      	ldr	r3, [pc, #424]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4a69      	ldr	r2, [pc, #420]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6213      	str	r3, [r2, #32]
 8002bd8:	e00b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x36e>
 8002bda:	4b67      	ldr	r3, [pc, #412]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4a66      	ldr	r2, [pc, #408]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6213      	str	r3, [r2, #32]
 8002be6:	4b64      	ldr	r3, [pc, #400]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a63      	ldr	r2, [pc, #396]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d015      	beq.n	8002c26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe f813 	bl	8000c24 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe f80f 	bl	8000c24 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0ab      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c18:	4b57      	ldr	r3, [pc, #348]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0ee      	beq.n	8002c02 <HAL_RCC_OscConfig+0x37e>
 8002c24:	e014      	b.n	8002c50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7fd fffd 	bl	8000c24 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fd fff9 	bl	8000c24 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e095      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c44:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ee      	bne.n	8002c2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d105      	bne.n	8002c62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c56:	4b48      	ldr	r3, [pc, #288]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4a47      	ldr	r2, [pc, #284]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8081 	beq.w	8002d6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c6c:	4b42      	ldr	r3, [pc, #264]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d061      	beq.n	8002d3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d146      	bne.n	8002d0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c80:	4b3f      	ldr	r3, [pc, #252]	; (8002d80 <HAL_RCC_OscConfig+0x4fc>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fd ffcd 	bl	8000c24 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fd ffc9 	bl	8000c24 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e067      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca0:	4b35      	ldr	r3, [pc, #212]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f0      	bne.n	8002c8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb4:	d108      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cb6:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	492d      	ldr	r1, [pc, #180]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a19      	ldr	r1, [r3, #32]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	4927      	ldr	r1, [pc, #156]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_RCC_OscConfig+0x4fc>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fd ff9d 	bl	8000c24 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fd ff99 	bl	8000c24 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e037      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x46a>
 8002d0c:	e02f      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <HAL_RCC_OscConfig+0x4fc>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fd ff86 	bl	8000c24 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fd ff82 	bl	8000c24 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e020      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x498>
 8002d3a:	e018      	b.n	8002d6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e013      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42420060 	.word	0x42420060

08002d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0d0      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b6a      	ldr	r3, [pc, #424]	; (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d910      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b67      	ldr	r3, [pc, #412]	; (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 0207 	bic.w	r2, r3, #7
 8002dae:	4965      	ldr	r1, [pc, #404]	; (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b63      	ldr	r3, [pc, #396]	; (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0b8      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d020      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de0:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4a58      	ldr	r2, [pc, #352]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df8:	4b53      	ldr	r3, [pc, #332]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a52      	ldr	r2, [pc, #328]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e04:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	494d      	ldr	r1, [pc, #308]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d040      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d115      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e07f      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e073      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e52:	4b3d      	ldr	r3, [pc, #244]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e06b      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e62:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f023 0203 	bic.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4936      	ldr	r1, [pc, #216]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e74:	f7fd fed6 	bl	8000c24 <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7fd fed2 	bl	8000c24 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e053      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 020c 	and.w	r2, r3, #12
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1eb      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b27      	ldr	r3, [pc, #156]	; (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d210      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 0207 	bic.w	r2, r3, #7
 8002eba:	4922      	ldr	r1, [pc, #136]	; (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e032      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee0:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4916      	ldr	r1, [pc, #88]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002efe:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	490e      	ldr	r1, [pc, #56]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f12:	f000 f821 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8002f16:	4601      	mov	r1, r0
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002f24:	5cd3      	ldrb	r3, [r2, r3]
 8002f26:	fa21 f303 	lsr.w	r3, r1, r3
 8002f2a:	4a09      	ldr	r2, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1cc>)
 8002f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <HAL_RCC_ClockConfig+0x1d0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fe34 	bl	8000ba0 <HAL_InitTick>

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40022000 	.word	0x40022000
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08007e18 	.word	0x08007e18
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000004 	.word	0x20000004

08002f58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f58:	b490      	push	{r4, r7}
 8002f5a:	b08a      	sub	sp, #40	; 0x28
 8002f5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f5e:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f60:	1d3c      	adds	r4, r7, #4
 8002f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f68:	4b28      	ldr	r3, [pc, #160]	; (800300c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	2300      	movs	r3, #0
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f82:	4b23      	ldr	r3, [pc, #140]	; (8003010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x40>
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_GetSysClockFreq+0x46>
 8002f96:	e02d      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f98:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f9a:	623b      	str	r3, [r7, #32]
      break;
 8002f9c:	e02d      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	0c9b      	lsrs	r3, r3, #18
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002faa:	4413      	add	r3, r2
 8002fac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	0c5b      	lsrs	r3, r3, #17
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fca:	4413      	add	r3, r2
 8002fcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	4a0f      	ldr	r2, [pc, #60]	; (8003014 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fd6:	fb02 f203 	mul.w	r2, r2, r3
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe2:	e004      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	4a0c      	ldr	r2, [pc, #48]	; (8003018 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	623b      	str	r3, [r7, #32]
      break;
 8002ff2:	e002      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ff4:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ff6:	623b      	str	r3, [r7, #32]
      break;
 8002ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3728      	adds	r7, #40	; 0x28
 8003000:	46bd      	mov	sp, r7
 8003002:	bc90      	pop	{r4, r7}
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	08007dbc 	.word	0x08007dbc
 800300c:	08007dcc 	.word	0x08007dcc
 8003010:	40021000 	.word	0x40021000
 8003014:	007a1200 	.word	0x007a1200
 8003018:	003d0900 	.word	0x003d0900

0800301c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <RCC_Delay+0x34>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0a      	ldr	r2, [pc, #40]	; (8003054 <RCC_Delay+0x38>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	0a5b      	lsrs	r3, r3, #9
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003038:	bf00      	nop
  }
  while (Delay --);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1e5a      	subs	r2, r3, #1
 800303e:	60fa      	str	r2, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f9      	bne.n	8003038 <RCC_Delay+0x1c>
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000000 	.word	0x20000000
 8003054:	10624dd3 	.word	0x10624dd3

08003058 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d07d      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003074:	2300      	movs	r3, #0
 8003076:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003078:	4b4f      	ldr	r3, [pc, #316]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10d      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	4b4c      	ldr	r3, [pc, #304]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	4a4b      	ldr	r2, [pc, #300]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308e:	61d3      	str	r3, [r2, #28]
 8003090:	4b49      	ldr	r3, [pc, #292]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309c:	2301      	movs	r3, #1
 800309e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a0:	4b46      	ldr	r3, [pc, #280]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d118      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ac:	4b43      	ldr	r3, [pc, #268]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a42      	ldr	r2, [pc, #264]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b8:	f7fd fdb4 	bl	8000c24 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	e008      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c0:	f7fd fdb0 	bl	8000c24 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e06d      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d2:	4b3a      	ldr	r3, [pc, #232]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030de:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d02e      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d027      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030fc:	4b2e      	ldr	r3, [pc, #184]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003104:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003106:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800310c:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003112:	4a29      	ldr	r2, [pc, #164]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d014      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003122:	f7fd fd7f 	bl	8000c24 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003128:	e00a      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fd fd7b 	bl	8000c24 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f241 3288 	movw	r2, #5000	; 0x1388
 8003138:	4293      	cmp	r3, r2
 800313a:	d901      	bls.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e036      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0ee      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800314c:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4917      	ldr	r1, [pc, #92]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315a:	4313      	orrs	r3, r2
 800315c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800315e:	7dfb      	ldrb	r3, [r7, #23]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d105      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	4a13      	ldr	r2, [pc, #76]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800317c:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	490b      	ldr	r1, [pc, #44]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	4904      	ldr	r1, [pc, #16]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40007000 	.word	0x40007000
 80031c0:	42420440 	.word	0x42420440

080031c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e076      	b.n	80032c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d108      	bne.n	80031f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031e6:	d009      	beq.n	80031fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	61da      	str	r2, [r3, #28]
 80031ee:	e005      	b.n	80031fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fd fbd0 	bl	80009bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003232:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	ea42 0103 	orr.w	r1, r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	0c1a      	lsrs	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f002 0204 	and.w	r2, r2, #4
 80032a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_SPI_Transmit+0x22>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e126      	b.n	800353c <HAL_SPI_Transmit+0x270>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032f6:	f7fd fc95 	bl	8000c24 <HAL_GetTick>
 80032fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d002      	beq.n	8003312 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800330c:	2302      	movs	r3, #2
 800330e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003310:	e10b      	b.n	800352a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_SPI_Transmit+0x52>
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003322:	e102      	b.n	800352a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2203      	movs	r2, #3
 8003328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	88fa      	ldrh	r2, [r7, #6]
 800333c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336a:	d10f      	bne.n	800338c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800338a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d007      	beq.n	80033aa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b2:	d14b      	bne.n	800344c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_SPI_Transmit+0xf6>
 80033bc:	8afb      	ldrh	r3, [r7, #22]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d13e      	bne.n	8003440 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	881a      	ldrh	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	1c9a      	adds	r2, r3, #2
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033e6:	e02b      	b.n	8003440 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d112      	bne.n	800341c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	881a      	ldrh	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	1c9a      	adds	r2, r3, #2
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	86da      	strh	r2, [r3, #54]	; 0x36
 800341a:	e011      	b.n	8003440 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800341c:	f7fd fc02 	bl	8000c24 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d803      	bhi.n	8003434 <HAL_SPI_Transmit+0x168>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	d102      	bne.n	800343a <HAL_SPI_Transmit+0x16e>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d102      	bne.n	8003440 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800343e:	e074      	b.n	800352a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1ce      	bne.n	80033e8 <HAL_SPI_Transmit+0x11c>
 800344a:	e04c      	b.n	80034e6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_SPI_Transmit+0x18e>
 8003454:	8afb      	ldrh	r3, [r7, #22]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d140      	bne.n	80034dc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	330c      	adds	r3, #12
 8003464:	7812      	ldrb	r2, [r2, #0]
 8003466:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003480:	e02c      	b.n	80034dc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	d113      	bne.n	80034b8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	7812      	ldrb	r2, [r2, #0]
 800349c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80034b6:	e011      	b.n	80034dc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034b8:	f7fd fbb4 	bl	8000c24 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d803      	bhi.n	80034d0 <HAL_SPI_Transmit+0x204>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	d102      	bne.n	80034d6 <HAL_SPI_Transmit+0x20a>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034da:	e026      	b.n	800352a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1cd      	bne.n	8003482 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	6839      	ldr	r1, [r7, #0]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fbb8 	bl	8003c60 <SPI_EndRxTxTransaction>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	77fb      	strb	r3, [r7, #31]
 8003526:	e000      	b.n	800352a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003528:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800353a:	7ffb      	ldrb	r3, [r7, #31]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3720      	adds	r7, #32
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003560:	d112      	bne.n	8003588 <HAL_SPI_Receive+0x44>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10e      	bne.n	8003588 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2204      	movs	r2, #4
 800356e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003572:	88fa      	ldrh	r2, [r7, #6]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f8f1 	bl	8003766 <HAL_SPI_TransmitReceive>
 8003584:	4603      	mov	r3, r0
 8003586:	e0ea      	b.n	800375e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_SPI_Receive+0x52>
 8003592:	2302      	movs	r3, #2
 8003594:	e0e3      	b.n	800375e <HAL_SPI_Receive+0x21a>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800359e:	f7fd fb41 	bl	8000c24 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d002      	beq.n	80035b6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
 80035b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035b4:	e0ca      	b.n	800374c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_SPI_Receive+0x7e>
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035c6:	e0c1      	b.n	800374c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2204      	movs	r2, #4
 80035cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	88fa      	ldrh	r2, [r7, #6]
 80035e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800360e:	d10f      	bne.n	8003630 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800362e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d007      	beq.n	800364e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800364c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d162      	bne.n	800371c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003656:	e02e      	b.n	80036b6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d115      	bne.n	8003692 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f103 020c 	add.w	r2, r3, #12
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	7812      	ldrb	r2, [r2, #0]
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003690:	e011      	b.n	80036b6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003692:	f7fd fac7 	bl	8000c24 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d803      	bhi.n	80036aa <HAL_SPI_Receive+0x166>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d102      	bne.n	80036b0 <HAL_SPI_Receive+0x16c>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036b4:	e04a      	b.n	800374c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1cb      	bne.n	8003658 <HAL_SPI_Receive+0x114>
 80036c0:	e031      	b.n	8003726 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d113      	bne.n	80036f8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	b292      	uxth	r2, r2
 80036dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	1c9a      	adds	r2, r3, #2
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036f6:	e011      	b.n	800371c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036f8:	f7fd fa94 	bl	8000c24 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d803      	bhi.n	8003710 <HAL_SPI_Receive+0x1cc>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d102      	bne.n	8003716 <HAL_SPI_Receive+0x1d2>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	75fb      	strb	r3, [r7, #23]
          goto error;
 800371a:	e017      	b.n	800374c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1cd      	bne.n	80036c2 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	6839      	ldr	r1, [r7, #0]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fa46 	bl	8003bbc <SPI_EndRxTransaction>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	75fb      	strb	r3, [r7, #23]
 8003748:	e000      	b.n	800374c <HAL_SPI_Receive+0x208>
  }

error :
 800374a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800375c:	7dfb      	ldrb	r3, [r7, #23]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b08c      	sub	sp, #48	; 0x30
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003774:	2301      	movs	r3, #1
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_SPI_TransmitReceive+0x26>
 8003788:	2302      	movs	r3, #2
 800378a:	e18a      	b.n	8003aa2 <HAL_SPI_TransmitReceive+0x33c>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003794:	f7fd fa46 	bl	8000c24 <HAL_GetTick>
 8003798:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037aa:	887b      	ldrh	r3, [r7, #2]
 80037ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d00f      	beq.n	80037d6 <HAL_SPI_TransmitReceive+0x70>
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037bc:	d107      	bne.n	80037ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_SPI_TransmitReceive+0x68>
 80037c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d003      	beq.n	80037d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
 80037d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037d4:	e15b      	b.n	8003a8e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_SPI_TransmitReceive+0x82>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_SPI_TransmitReceive+0x82>
 80037e2:	887b      	ldrh	r3, [r7, #2]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037ee:	e14e      	b.n	8003a8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d003      	beq.n	8003804 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2205      	movs	r2, #5
 8003800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	887a      	ldrh	r2, [r7, #2]
 800381a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	887a      	ldrh	r2, [r7, #2]
 8003826:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	887a      	ldrh	r2, [r7, #2]
 800382c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d007      	beq.n	8003858 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003860:	d178      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_SPI_TransmitReceive+0x10a>
 800386a:	8b7b      	ldrh	r3, [r7, #26]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d166      	bne.n	800393e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	881a      	ldrh	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	1c9a      	adds	r2, r3, #2
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003894:	e053      	b.n	800393e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d11b      	bne.n	80038dc <HAL_SPI_TransmitReceive+0x176>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <HAL_SPI_TransmitReceive+0x176>
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d113      	bne.n	80038dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	881a      	ldrh	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	1c9a      	adds	r2, r3, #2
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d119      	bne.n	800391e <HAL_SPI_TransmitReceive+0x1b8>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d014      	beq.n	800391e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	b292      	uxth	r2, r2
 8003900:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	1c9a      	adds	r2, r3, #2
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800391a:	2301      	movs	r3, #1
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800391e:	f7fd f981 	bl	8000c24 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800392a:	429a      	cmp	r2, r3
 800392c:	d807      	bhi.n	800393e <HAL_SPI_TransmitReceive+0x1d8>
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d003      	beq.n	800393e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800393c:	e0a7      	b.n	8003a8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1a6      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x130>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1a1      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x130>
 8003952:	e07c      	b.n	8003a4e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_SPI_TransmitReceive+0x1fc>
 800395c:	8b7b      	ldrh	r3, [r7, #26]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d16b      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	7812      	ldrb	r2, [r2, #0]
 800396e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003988:	e057      	b.n	8003a3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b02      	cmp	r3, #2
 8003996:	d11c      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x26c>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d017      	beq.n	80039d2 <HAL_SPI_TransmitReceive+0x26c>
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d114      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	7812      	ldrb	r2, [r2, #0]
 80039b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d119      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x2ae>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d014      	beq.n	8003a14 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a10:	2301      	movs	r3, #1
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a14:	f7fd f906 	bl	8000c24 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d803      	bhi.n	8003a2c <HAL_SPI_TransmitReceive+0x2c6>
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d102      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x2cc>
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a38:	e029      	b.n	8003a8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1a2      	bne.n	800398a <HAL_SPI_TransmitReceive+0x224>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d19d      	bne.n	800398a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f904 	bl	8003c60 <SPI_EndRxTxTransaction>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d006      	beq.n	8003a6c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a6a:	e010      	b.n	8003a8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	e000      	b.n	8003a8e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3730      	adds	r7, #48	; 0x30
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003abc:	f7fd f8b2 	bl	8000c24 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	4413      	add	r3, r2
 8003aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003acc:	f7fd f8aa 	bl	8000c24 <HAL_GetTick>
 8003ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	015b      	lsls	r3, r3, #5
 8003ad8:	0d1b      	lsrs	r3, r3, #20
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae2:	e054      	b.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d050      	beq.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aec:	f7fd f89a 	bl	8000c24 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d902      	bls.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d13d      	bne.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1a:	d111      	bne.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b24:	d004      	beq.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2e:	d107      	bne.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b48:	d10f      	bne.n	8003b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e017      	b.n	8003bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d19b      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000000 	.word	0x20000000

08003bbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd0:	d111      	bne.n	8003bf6 <SPI_EndRxTransaction+0x3a>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bda:	d004      	beq.n	8003be6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be4:	d107      	bne.n	8003bf6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bfe:	d117      	bne.n	8003c30 <SPI_EndRxTransaction+0x74>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c08:	d112      	bne.n	8003c30 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2200      	movs	r2, #0
 8003c12:	2101      	movs	r1, #1
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f7ff ff49 	bl	8003aac <SPI_WaitFlagStateUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01a      	beq.n	8003c56 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e013      	b.n	8003c58 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2200      	movs	r2, #0
 8003c38:	2180      	movs	r1, #128	; 0x80
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff ff36 	bl	8003aac <SPI_WaitFlagStateUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4a:	f043 0220 	orr.w	r2, r3, #32
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e000      	b.n	8003c58 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2200      	movs	r2, #0
 8003c74:	2180      	movs	r1, #128	; 0x80
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7ff ff18 	bl	8003aac <SPI_WaitFlagStateUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e000      	b.n	8003c94 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	f107 0014 	add.w	r0, r7, #20
 8003caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	b004      	add	sp, #16
 8003cba:	4770      	bx	lr

08003cbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ccc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cd0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cf0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cf4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	4013      	ands	r3, r2
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d34:	b084      	sub	sp, #16
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	f107 0014 	add.w	r0, r7, #20
 8003d42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	b004      	add	sp, #16
 8003d72:	4770      	bx	lr

08003d74 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b09b      	sub	sp, #108	; 0x6c
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	78db      	ldrb	r3, [r3, #3]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d81f      	bhi.n	8003de6 <USB_ActivateEndpoint+0x72>
 8003da6:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <USB_ActivateEndpoint+0x38>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003dd9 	.word	0x08003dd9
 8003db4:	08003def 	.word	0x08003def
 8003db8:	08003dcb 	.word	0x08003dcb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003dbc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003dc8:	e012      	b.n	8003df0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003dca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003dd2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003dd6:	e00b      	b.n	8003df0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003dd8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ddc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003de0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003de4:	e004      	b.n	8003df0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003dec:	e000      	b.n	8003df0 <USB_ActivateEndpoint+0x7c>
      break;
 8003dee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	441a      	add	r2, r3
 8003dfa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	441a      	add	r2, r3
 8003e40:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	7b1b      	ldrb	r3, [r3, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f040 8149 	bne.w	80040f4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	785b      	ldrb	r3, [r3, #1]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8084 	beq.w	8003f74 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	011a      	lsls	r2, r3, #4
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	88db      	ldrh	r3, [r3, #6]
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	81fb      	strh	r3, [r7, #14]
 8003eae:	89fb      	ldrh	r3, [r7, #14]
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01b      	beq.n	8003ef0 <USB_ActivateEndpoint+0x17c>
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	81bb      	strh	r3, [r7, #12]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	441a      	add	r2, r3
 8003eda:	89bb      	ldrh	r3, [r7, #12]
 8003edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	78db      	ldrb	r3, [r3, #3]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d020      	beq.n	8003f3a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0e:	813b      	strh	r3, [r7, #8]
 8003f10:	893b      	ldrh	r3, [r7, #8]
 8003f12:	f083 0320 	eor.w	r3, r3, #32
 8003f16:	813b      	strh	r3, [r7, #8]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	441a      	add	r2, r3
 8003f22:	893b      	ldrh	r3, [r7, #8]
 8003f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	8013      	strh	r3, [r2, #0]
 8003f38:	e27f      	b.n	800443a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f50:	817b      	strh	r3, [r7, #10]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	441a      	add	r2, r3
 8003f5c:	897b      	ldrh	r3, [r7, #10]
 8003f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	8013      	strh	r3, [r2, #0]
 8003f72:	e262      	b.n	800443a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	4413      	add	r3, r2
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	011a      	lsls	r2, r3, #4
 8003f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	88db      	ldrh	r3, [r3, #6]
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	4413      	add	r3, r2
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	011a      	lsls	r2, r3, #4
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fca:	623b      	str	r3, [r7, #32]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d112      	bne.n	8003ffa <USB_ActivateEndpoint+0x286>
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	801a      	strh	r2, [r3, #0]
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	801a      	strh	r2, [r3, #0]
 8003ff8:	e02f      	b.n	800405a <USB_ActivateEndpoint+0x2e6>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b3e      	cmp	r3, #62	; 0x3e
 8004000:	d813      	bhi.n	800402a <USB_ActivateEndpoint+0x2b6>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	663b      	str	r3, [r7, #96]	; 0x60
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <USB_ActivateEndpoint+0x2a8>
 8004016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004018:	3301      	adds	r3, #1
 800401a:	663b      	str	r3, [r7, #96]	; 0x60
 800401c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800401e:	b29b      	uxth	r3, r3
 8004020:	029b      	lsls	r3, r3, #10
 8004022:	b29a      	uxth	r2, r3
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	801a      	strh	r2, [r3, #0]
 8004028:	e017      	b.n	800405a <USB_ActivateEndpoint+0x2e6>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	663b      	str	r3, [r7, #96]	; 0x60
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	2b00      	cmp	r3, #0
 800403c:	d102      	bne.n	8004044 <USB_ActivateEndpoint+0x2d0>
 800403e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004040:	3b01      	subs	r3, #1
 8004042:	663b      	str	r3, [r7, #96]	; 0x60
 8004044:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004046:	b29b      	uxth	r3, r3
 8004048:	029b      	lsls	r3, r3, #10
 800404a:	b29b      	uxth	r3, r3
 800404c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004054:	b29a      	uxth	r2, r3
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	83fb      	strh	r3, [r7, #30]
 8004068:	8bfb      	ldrh	r3, [r7, #30]
 800406a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d01b      	beq.n	80040aa <USB_ActivateEndpoint+0x336>
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004088:	83bb      	strh	r3, [r7, #28]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	441a      	add	r2, r3
 8004094:	8bbb      	ldrh	r3, [r7, #28]
 8004096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800409e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c0:	837b      	strh	r3, [r7, #26]
 80040c2:	8b7b      	ldrh	r3, [r7, #26]
 80040c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040c8:	837b      	strh	r3, [r7, #26]
 80040ca:	8b7b      	ldrh	r3, [r7, #26]
 80040cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040d0:	837b      	strh	r3, [r7, #26]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	8b7b      	ldrh	r3, [r7, #26]
 80040de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	8013      	strh	r3, [r2, #0]
 80040f2:	e1a2      	b.n	800443a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29b      	uxth	r3, r3
 8004102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	441a      	add	r2, r3
 8004118:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800411c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004124:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412c:	b29b      	uxth	r3, r3
 800412e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	65bb      	str	r3, [r7, #88]	; 0x58
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800413a:	b29b      	uxth	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004140:	4413      	add	r3, r2
 8004142:	65bb      	str	r3, [r7, #88]	; 0x58
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	011a      	lsls	r2, r3, #4
 800414a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800414c:	4413      	add	r3, r2
 800414e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004152:	657b      	str	r3, [r7, #84]	; 0x54
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	891b      	ldrh	r3, [r3, #8]
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	b29b      	uxth	r3, r3
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004162:	801a      	strh	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	653b      	str	r3, [r7, #80]	; 0x50
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416e:	b29b      	uxth	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004174:	4413      	add	r3, r2
 8004176:	653b      	str	r3, [r7, #80]	; 0x50
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	011a      	lsls	r2, r3, #4
 800417e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004180:	4413      	add	r3, r2
 8004182:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	895b      	ldrh	r3, [r3, #10]
 800418c:	085b      	lsrs	r3, r3, #1
 800418e:	b29b      	uxth	r3, r3
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004196:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 8091 	bne.w	80042c4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80041b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80041b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01b      	beq.n	80041f2 <USB_ActivateEndpoint+0x47e>
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	441a      	add	r2, r3
 80041dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80041de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8004200:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01b      	beq.n	8004242 <USB_ActivateEndpoint+0x4ce>
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004220:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	441a      	add	r2, r3
 800422c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800422e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800423a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800423e:	b29b      	uxth	r3, r3
 8004240:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004258:	86bb      	strh	r3, [r7, #52]	; 0x34
 800425a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800425c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004260:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004262:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004264:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004268:	86bb      	strh	r3, [r7, #52]	; 0x34
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	441a      	add	r2, r3
 8004274:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800427a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800427e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004286:	b29b      	uxth	r3, r3
 8004288:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a0:	867b      	strh	r3, [r7, #50]	; 0x32
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	441a      	add	r2, r3
 80042ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80042ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042be:	b29b      	uxth	r3, r3
 80042c0:	8013      	strh	r3, [r2, #0]
 80042c2:	e0ba      	b.n	800443a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80042d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01d      	beq.n	800431c <USB_ActivateEndpoint+0x5a8>
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	441a      	add	r2, r3
 8004304:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800430c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004318:	b29b      	uxth	r3, r3
 800431a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800432c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01d      	beq.n	8004374 <USB_ActivateEndpoint+0x600>
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	441a      	add	r2, r3
 800435c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004370:	b29b      	uxth	r3, r3
 8004372:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	78db      	ldrb	r3, [r3, #3]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d024      	beq.n	80043c6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004392:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004396:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800439a:	f083 0320 	eor.w	r3, r3, #32
 800439e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	441a      	add	r2, r3
 80043ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	8013      	strh	r3, [r2, #0]
 80043c4:	e01d      	b.n	8004402 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	441a      	add	r2, r3
 80043ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80043ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fe:	b29b      	uxth	r3, r3
 8004400:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004418:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	441a      	add	r2, r3
 8004424:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800442a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800442e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004436:	b29b      	uxth	r3, r3
 8004438:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800443a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800443e:	4618      	mov	r0, r3
 8004440:	376c      	adds	r7, #108	; 0x6c
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004448:	b480      	push	{r7}
 800444a:	b08d      	sub	sp, #52	; 0x34
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	7b1b      	ldrb	r3, [r3, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f040 808e 	bne.w	8004578 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	785b      	ldrb	r3, [r3, #1]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d044      	beq.n	80044ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	81bb      	strh	r3, [r7, #12]
 8004472:	89bb      	ldrh	r3, [r7, #12]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01b      	beq.n	80044b4 <USB_DeactivateEndpoint+0x6c>
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	b29b      	uxth	r3, r3
 800448a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	817b      	strh	r3, [r7, #10]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	897b      	ldrh	r3, [r7, #10]
 80044a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ca:	813b      	strh	r3, [r7, #8]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	893b      	ldrh	r3, [r7, #8]
 80044d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	8013      	strh	r3, [r2, #0]
 80044ec:	e192      	b.n	8004814 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	827b      	strh	r3, [r7, #18]
 80044fc:	8a7b      	ldrh	r3, [r7, #18]
 80044fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01b      	beq.n	800453e <USB_DeactivateEndpoint+0xf6>
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451c:	823b      	strh	r3, [r7, #16]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	441a      	add	r2, r3
 8004528:	8a3b      	ldrh	r3, [r7, #16]
 800452a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800452e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453a:	b29b      	uxth	r3, r3
 800453c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	b29b      	uxth	r3, r3
 800454c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004554:	81fb      	strh	r3, [r7, #14]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	441a      	add	r2, r3
 8004560:	89fb      	ldrh	r3, [r7, #14]
 8004562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800456a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800456e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004572:	b29b      	uxth	r3, r3
 8004574:	8013      	strh	r3, [r2, #0]
 8004576:	e14d      	b.n	8004814 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f040 80a5 	bne.w	80046cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	843b      	strh	r3, [r7, #32]
 8004590:	8c3b      	ldrh	r3, [r7, #32]
 8004592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01b      	beq.n	80045d2 <USB_DeactivateEndpoint+0x18a>
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b0:	83fb      	strh	r3, [r7, #30]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	441a      	add	r2, r3
 80045bc:	8bfb      	ldrh	r3, [r7, #30]
 80045be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	83bb      	strh	r3, [r7, #28]
 80045e0:	8bbb      	ldrh	r3, [r7, #28]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d01b      	beq.n	8004622 <USB_DeactivateEndpoint+0x1da>
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004600:	837b      	strh	r3, [r7, #26]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	441a      	add	r2, r3
 800460c:	8b7b      	ldrh	r3, [r7, #26]
 800460e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800461e:	b29b      	uxth	r3, r3
 8004620:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004638:	833b      	strh	r3, [r7, #24]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	441a      	add	r2, r3
 8004644:	8b3b      	ldrh	r3, [r7, #24]
 8004646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004652:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004656:	b29b      	uxth	r3, r3
 8004658:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800466c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004670:	82fb      	strh	r3, [r7, #22]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	441a      	add	r2, r3
 800467c:	8afb      	ldrh	r3, [r7, #22]
 800467e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800468a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468e:	b29b      	uxth	r3, r3
 8004690:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a8:	82bb      	strh	r3, [r7, #20]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	441a      	add	r2, r3
 80046b4:	8abb      	ldrh	r3, [r7, #20]
 80046b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	8013      	strh	r3, [r2, #0]
 80046ca:	e0a3      	b.n	8004814 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01b      	beq.n	800471c <USB_DeactivateEndpoint+0x2d4>
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	441a      	add	r2, r3
 8004706:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800470c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004718:	b29b      	uxth	r3, r3
 800471a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	857b      	strh	r3, [r7, #42]	; 0x2a
 800472a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01b      	beq.n	800476c <USB_DeactivateEndpoint+0x324>
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	853b      	strh	r3, [r7, #40]	; 0x28
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800475c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004764:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004768:	b29b      	uxth	r3, r3
 800476a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004782:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800479c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	441a      	add	r2, r3
 80047c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d8:	b29b      	uxth	r3, r3
 80047da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	441a      	add	r2, r3
 80047fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004810:	b29b      	uxth	r3, r3
 8004812:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3734      	adds	r7, #52	; 0x34
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr

08004820 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b0c4      	sub	sp, #272	; 0x110
 8004824:	af00      	add	r7, sp, #0
 8004826:	1d3b      	adds	r3, r7, #4
 8004828:	6018      	str	r0, [r3, #0]
 800482a:	463b      	mov	r3, r7
 800482c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800482e:	463b      	mov	r3, r7
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	2b01      	cmp	r3, #1
 8004836:	f040 8557 	bne.w	80052e8 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800483a:	463b      	mov	r3, r7
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699a      	ldr	r2, [r3, #24]
 8004840:	463b      	mov	r3, r7
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	429a      	cmp	r2, r3
 8004848:	d905      	bls.n	8004856 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800484a:	463b      	mov	r3, r7
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004854:	e004      	b.n	8004860 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004856:	463b      	mov	r3, r7
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004860:	463b      	mov	r3, r7
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	7b1b      	ldrb	r3, [r3, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d12c      	bne.n	80048c4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800486a:	463b      	mov	r3, r7
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6959      	ldr	r1, [r3, #20]
 8004870:	463b      	mov	r3, r7
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	88da      	ldrh	r2, [r3, #6]
 8004876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800487a:	b29b      	uxth	r3, r3
 800487c:	1d38      	adds	r0, r7, #4
 800487e:	6800      	ldr	r0, [r0, #0]
 8004880:	f001 fa2c 	bl	8005cdc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	1d3b      	adds	r3, r7, #4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004892:	b29b      	uxth	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	4413      	add	r3, r2
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	463b      	mov	r3, r7
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	011a      	lsls	r2, r3, #4
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	4413      	add	r3, r2
 80048a8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80048ac:	f107 0310 	add.w	r3, r7, #16
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	f107 0310 	add.w	r3, r7, #16
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	f000 bcdd 	b.w	800527e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80048c4:	463b      	mov	r3, r7
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	78db      	ldrb	r3, [r3, #3]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	f040 8347 	bne.w	8004f5e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80048d0:	463b      	mov	r3, r7
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	463b      	mov	r3, r7
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	429a      	cmp	r2, r3
 80048de:	f240 82eb 	bls.w	8004eb8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80048e2:	1d3b      	adds	r3, r7, #4
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	463b      	mov	r3, r7
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004900:	1d3b      	adds	r3, r7, #4
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	463b      	mov	r3, r7
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800491a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800491e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004922:	b29b      	uxth	r3, r3
 8004924:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004926:	463b      	mov	r3, r7
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004930:	1ad2      	subs	r2, r2, r3
 8004932:	463b      	mov	r3, r7
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004938:	1d3b      	adds	r3, r7, #4
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	463b      	mov	r3, r7
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 8159 	beq.w	8004c06 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004954:	1d3b      	adds	r3, r7, #4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	637b      	str	r3, [r7, #52]	; 0x34
 800495a:	463b      	mov	r3, r7
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d164      	bne.n	8004a2e <USB_EPStartXfer+0x20e>
 8004964:	1d3b      	adds	r3, r7, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	4413      	add	r3, r2
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800497c:	463b      	mov	r3, r7
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	011a      	lsls	r2, r3, #4
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	4413      	add	r3, r2
 8004988:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
 800498e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d112      	bne.n	80049bc <USB_EPStartXfer+0x19c>
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b8:	801a      	strh	r2, [r3, #0]
 80049ba:	e054      	b.n	8004a66 <USB_EPStartXfer+0x246>
 80049bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c0:	2b3e      	cmp	r3, #62	; 0x3e
 80049c2:	d817      	bhi.n	80049f4 <USB_EPStartXfer+0x1d4>
 80049c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c8:	085b      	lsrs	r3, r3, #1
 80049ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d004      	beq.n	80049e4 <USB_EPStartXfer+0x1c4>
 80049da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049de:	3301      	adds	r3, #1
 80049e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	029b      	lsls	r3, r3, #10
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	801a      	strh	r2, [r3, #0]
 80049f2:	e038      	b.n	8004a66 <USB_EPStartXfer+0x246>
 80049f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <USB_EPStartXfer+0x1f4>
 8004a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	029b      	lsls	r3, r3, #10
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	e01b      	b.n	8004a66 <USB_EPStartXfer+0x246>
 8004a2e:	463b      	mov	r3, r7
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d116      	bne.n	8004a66 <USB_EPStartXfer+0x246>
 8004a38:	1d3b      	adds	r3, r7, #4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a46:	4413      	add	r3, r2
 8004a48:	637b      	str	r3, [r7, #52]	; 0x34
 8004a4a:	463b      	mov	r3, r7
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	011a      	lsls	r2, r3, #4
 8004a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a54:	4413      	add	r3, r2
 8004a56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8004a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a66:	463b      	mov	r3, r7
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	895b      	ldrh	r3, [r3, #10]
 8004a6c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a70:	463b      	mov	r3, r7
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6959      	ldr	r1, [r3, #20]
 8004a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a80:	1d38      	adds	r0, r7, #4
 8004a82:	6800      	ldr	r0, [r0, #0]
 8004a84:	f001 f92a 	bl	8005cdc <USB_WritePMA>
            ep->xfer_buff += len;
 8004a88:	463b      	mov	r3, r7
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a92:	441a      	add	r2, r3
 8004a94:	463b      	mov	r3, r7
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6a1a      	ldr	r2, [r3, #32]
 8004aa0:	463b      	mov	r3, r7
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d909      	bls.n	8004abe <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004aaa:	463b      	mov	r3, r7
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab4:	1ad2      	subs	r2, r2, r3
 8004ab6:	463b      	mov	r3, r7
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	621a      	str	r2, [r3, #32]
 8004abc:	e008      	b.n	8004ad0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004abe:	463b      	mov	r3, r7
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004ac8:	463b      	mov	r3, r7
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2200      	movs	r2, #0
 8004ace:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ad0:	463b      	mov	r3, r7
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	785b      	ldrb	r3, [r3, #1]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d164      	bne.n	8004ba4 <USB_EPStartXfer+0x384>
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	1d3b      	adds	r3, r7, #4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	463b      	mov	r3, r7
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	011a      	lsls	r2, r3, #4
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4413      	add	r3, r2
 8004afe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d112      	bne.n	8004b32 <USB_EPStartXfer+0x312>
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	801a      	strh	r2, [r3, #0]
 8004b30:	e057      	b.n	8004be2 <USB_EPStartXfer+0x3c2>
 8004b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b36:	2b3e      	cmp	r3, #62	; 0x3e
 8004b38:	d817      	bhi.n	8004b6a <USB_EPStartXfer+0x34a>
 8004b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b3e:	085b      	lsrs	r3, r3, #1
 8004b40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <USB_EPStartXfer+0x33a>
 8004b50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b54:	3301      	adds	r3, #1
 8004b56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	029b      	lsls	r3, r3, #10
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	801a      	strh	r2, [r3, #0]
 8004b68:	e03b      	b.n	8004be2 <USB_EPStartXfer+0x3c2>
 8004b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d104      	bne.n	8004b8a <USB_EPStartXfer+0x36a>
 8004b80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b84:	3b01      	subs	r3, #1
 8004b86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	029b      	lsls	r3, r3, #10
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	801a      	strh	r2, [r3, #0]
 8004ba2:	e01e      	b.n	8004be2 <USB_EPStartXfer+0x3c2>
 8004ba4:	463b      	mov	r3, r7
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d119      	bne.n	8004be2 <USB_EPStartXfer+0x3c2>
 8004bae:	1d3b      	adds	r3, r7, #4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb4:	1d3b      	adds	r3, r7, #4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	4413      	add	r3, r2
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	463b      	mov	r3, r7
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	011a      	lsls	r2, r3, #4
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bd6:	623b      	str	r3, [r7, #32]
 8004bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004be2:	463b      	mov	r3, r7
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	891b      	ldrh	r3, [r3, #8]
 8004be8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bec:	463b      	mov	r3, r7
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6959      	ldr	r1, [r3, #20]
 8004bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004bfc:	1d38      	adds	r0, r7, #4
 8004bfe:	6800      	ldr	r0, [r0, #0]
 8004c00:	f001 f86c 	bl	8005cdc <USB_WritePMA>
 8004c04:	e33b      	b.n	800527e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c06:	463b      	mov	r3, r7
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d164      	bne.n	8004cda <USB_EPStartXfer+0x4ba>
 8004c10:	1d3b      	adds	r3, r7, #4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c24:	4413      	add	r3, r2
 8004c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c28:	463b      	mov	r3, r7
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	011a      	lsls	r2, r3, #4
 8004c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c32:	4413      	add	r3, r2
 8004c34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d112      	bne.n	8004c68 <USB_EPStartXfer+0x448>
 8004c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c50:	801a      	strh	r2, [r3, #0]
 8004c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c64:	801a      	strh	r2, [r3, #0]
 8004c66:	e057      	b.n	8004d18 <USB_EPStartXfer+0x4f8>
 8004c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c6c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c6e:	d817      	bhi.n	8004ca0 <USB_EPStartXfer+0x480>
 8004c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d004      	beq.n	8004c90 <USB_EPStartXfer+0x470>
 8004c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	029b      	lsls	r3, r3, #10
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c9c:	801a      	strh	r2, [r3, #0]
 8004c9e:	e03b      	b.n	8004d18 <USB_EPStartXfer+0x4f8>
 8004ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <USB_EPStartXfer+0x4a0>
 8004cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	029b      	lsls	r3, r3, #10
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd6:	801a      	strh	r2, [r3, #0]
 8004cd8:	e01e      	b.n	8004d18 <USB_EPStartXfer+0x4f8>
 8004cda:	463b      	mov	r3, r7
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	785b      	ldrb	r3, [r3, #1]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d119      	bne.n	8004d18 <USB_EPStartXfer+0x4f8>
 8004ce4:	1d3b      	adds	r3, r7, #4
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	657b      	str	r3, [r7, #84]	; 0x54
 8004cea:	1d3b      	adds	r3, r7, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf8:	4413      	add	r3, r2
 8004cfa:	657b      	str	r3, [r7, #84]	; 0x54
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	011a      	lsls	r2, r3, #4
 8004d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d06:	4413      	add	r3, r2
 8004d08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d0c:	653b      	str	r3, [r7, #80]	; 0x50
 8004d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d18:	463b      	mov	r3, r7
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	891b      	ldrh	r3, [r3, #8]
 8004d1e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d22:	463b      	mov	r3, r7
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6959      	ldr	r1, [r3, #20]
 8004d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d32:	1d38      	adds	r0, r7, #4
 8004d34:	6800      	ldr	r0, [r0, #0]
 8004d36:	f000 ffd1 	bl	8005cdc <USB_WritePMA>
            ep->xfer_buff += len;
 8004d3a:	463b      	mov	r3, r7
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d44:	441a      	add	r2, r3
 8004d46:	463b      	mov	r3, r7
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d4c:	463b      	mov	r3, r7
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6a1a      	ldr	r2, [r3, #32]
 8004d52:	463b      	mov	r3, r7
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d909      	bls.n	8004d70 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004d5c:	463b      	mov	r3, r7
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6a1a      	ldr	r2, [r3, #32]
 8004d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d66:	1ad2      	subs	r2, r2, r3
 8004d68:	463b      	mov	r3, r7
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	621a      	str	r2, [r3, #32]
 8004d6e:	e008      	b.n	8004d82 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d70:	463b      	mov	r3, r7
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004d7a:	463b      	mov	r3, r7
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d82:	1d3b      	adds	r3, r7, #4
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	647b      	str	r3, [r7, #68]	; 0x44
 8004d88:	463b      	mov	r3, r7
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	785b      	ldrb	r3, [r3, #1]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d164      	bne.n	8004e5c <USB_EPStartXfer+0x63c>
 8004d92:	1d3b      	adds	r3, r7, #4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d98:	1d3b      	adds	r3, r7, #4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	461a      	mov	r2, r3
 8004da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da6:	4413      	add	r3, r2
 8004da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004daa:	463b      	mov	r3, r7
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	011a      	lsls	r2, r3, #4
 8004db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db4:	4413      	add	r3, r2
 8004db6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d112      	bne.n	8004dea <USB_EPStartXfer+0x5ca>
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	801a      	strh	r2, [r3, #0]
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	801a      	strh	r2, [r3, #0]
 8004de8:	e054      	b.n	8004e94 <USB_EPStartXfer+0x674>
 8004dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dee:	2b3e      	cmp	r3, #62	; 0x3e
 8004df0:	d817      	bhi.n	8004e22 <USB_EPStartXfer+0x602>
 8004df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d004      	beq.n	8004e12 <USB_EPStartXfer+0x5f2>
 8004e08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	029b      	lsls	r3, r3, #10
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	801a      	strh	r2, [r3, #0]
 8004e20:	e038      	b.n	8004e94 <USB_EPStartXfer+0x674>
 8004e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <USB_EPStartXfer+0x622>
 8004e38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	029b      	lsls	r3, r3, #10
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	801a      	strh	r2, [r3, #0]
 8004e5a:	e01b      	b.n	8004e94 <USB_EPStartXfer+0x674>
 8004e5c:	463b      	mov	r3, r7
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d116      	bne.n	8004e94 <USB_EPStartXfer+0x674>
 8004e66:	1d3b      	adds	r3, r7, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e74:	4413      	add	r3, r2
 8004e76:	647b      	str	r3, [r7, #68]	; 0x44
 8004e78:	463b      	mov	r3, r7
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	011a      	lsls	r2, r3, #4
 8004e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e82:	4413      	add	r3, r2
 8004e84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e88:	643b      	str	r3, [r7, #64]	; 0x40
 8004e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e94:	463b      	mov	r3, r7
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	895b      	ldrh	r3, [r3, #10]
 8004e9a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e9e:	463b      	mov	r3, r7
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6959      	ldr	r1, [r3, #20]
 8004ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004eae:	1d38      	adds	r0, r7, #4
 8004eb0:	6800      	ldr	r0, [r0, #0]
 8004eb2:	f000 ff13 	bl	8005cdc <USB_WritePMA>
 8004eb6:	e1e2      	b.n	800527e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004eb8:	463b      	mov	r3, r7
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004ec2:	1d3b      	adds	r3, r7, #4
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004edc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004ee0:	1d3b      	adds	r3, r7, #4
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	463b      	mov	r3, r7
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f1a:	4413      	add	r3, r2
 8004f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f1e:	463b      	mov	r3, r7
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	011a      	lsls	r2, r3, #4
 8004f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f28:	4413      	add	r3, r2
 8004f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	891b      	ldrh	r3, [r3, #8]
 8004f40:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f44:	463b      	mov	r3, r7
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6959      	ldr	r1, [r3, #20]
 8004f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f54:	1d38      	adds	r0, r7, #4
 8004f56:	6800      	ldr	r0, [r0, #0]
 8004f58:	f000 fec0 	bl	8005cdc <USB_WritePMA>
 8004f5c:	e18f      	b.n	800527e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f5e:	1d3b      	adds	r3, r7, #4
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	463b      	mov	r3, r7
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 808f 	beq.w	8005098 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f7a:	1d3b      	adds	r3, r7, #4
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f80:	463b      	mov	r3, r7
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	785b      	ldrb	r3, [r3, #1]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d164      	bne.n	8005054 <USB_EPStartXfer+0x834>
 8004f8a:	1d3b      	adds	r3, r7, #4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f90:	1d3b      	adds	r3, r7, #4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f9e:	4413      	add	r3, r2
 8004fa0:	673b      	str	r3, [r7, #112]	; 0x70
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	011a      	lsls	r2, r3, #4
 8004faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fac:	4413      	add	r3, r2
 8004fae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d112      	bne.n	8004fe2 <USB_EPStartXfer+0x7c2>
 8004fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fca:	801a      	strh	r2, [r3, #0]
 8004fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fde:	801a      	strh	r2, [r3, #0]
 8004fe0:	e054      	b.n	800508c <USB_EPStartXfer+0x86c>
 8004fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8004fe8:	d817      	bhi.n	800501a <USB_EPStartXfer+0x7fa>
 8004fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fee:	085b      	lsrs	r3, r3, #1
 8004ff0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d004      	beq.n	800500a <USB_EPStartXfer+0x7ea>
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005004:	3301      	adds	r3, #1
 8005006:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500e:	b29b      	uxth	r3, r3
 8005010:	029b      	lsls	r3, r3, #10
 8005012:	b29a      	uxth	r2, r3
 8005014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005016:	801a      	strh	r2, [r3, #0]
 8005018:	e038      	b.n	800508c <USB_EPStartXfer+0x86c>
 800501a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <USB_EPStartXfer+0x81a>
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	3b01      	subs	r3, #1
 8005036:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800503a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503e:	b29b      	uxth	r3, r3
 8005040:	029b      	lsls	r3, r3, #10
 8005042:	b29b      	uxth	r3, r3
 8005044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800504c:	b29a      	uxth	r2, r3
 800504e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005050:	801a      	strh	r2, [r3, #0]
 8005052:	e01b      	b.n	800508c <USB_EPStartXfer+0x86c>
 8005054:	463b      	mov	r3, r7
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d116      	bne.n	800508c <USB_EPStartXfer+0x86c>
 800505e:	1d3b      	adds	r3, r7, #4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005066:	b29b      	uxth	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800506c:	4413      	add	r3, r2
 800506e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005070:	463b      	mov	r3, r7
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	011a      	lsls	r2, r3, #4
 8005078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800507a:	4413      	add	r3, r2
 800507c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005080:	677b      	str	r3, [r7, #116]	; 0x74
 8005082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005086:	b29a      	uxth	r2, r3
 8005088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800508a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800508c:	463b      	mov	r3, r7
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	895b      	ldrh	r3, [r3, #10]
 8005092:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005096:	e097      	b.n	80051c8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	785b      	ldrb	r3, [r3, #1]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d168      	bne.n	8005174 <USB_EPStartXfer+0x954>
 80050a2:	1d3b      	adds	r3, r7, #4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050aa:	1d3b      	adds	r3, r7, #4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050ba:	4413      	add	r3, r2
 80050bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050c0:	463b      	mov	r3, r7
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	011a      	lsls	r2, r3, #4
 80050c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050cc:	4413      	add	r3, r2
 80050ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d112      	bne.n	8005102 <USB_EPStartXfer+0x8e2>
 80050dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050ea:	801a      	strh	r2, [r3, #0]
 80050ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050fe:	801a      	strh	r2, [r3, #0]
 8005100:	e05d      	b.n	80051be <USB_EPStartXfer+0x99e>
 8005102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005106:	2b3e      	cmp	r3, #62	; 0x3e
 8005108:	d817      	bhi.n	800513a <USB_EPStartXfer+0x91a>
 800510a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d004      	beq.n	800512a <USB_EPStartXfer+0x90a>
 8005120:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005124:	3301      	adds	r3, #1
 8005126:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800512a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800512e:	b29b      	uxth	r3, r3
 8005130:	029b      	lsls	r3, r3, #10
 8005132:	b29a      	uxth	r2, r3
 8005134:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005136:	801a      	strh	r2, [r3, #0]
 8005138:	e041      	b.n	80051be <USB_EPStartXfer+0x99e>
 800513a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	2b00      	cmp	r3, #0
 800514e:	d104      	bne.n	800515a <USB_EPStartXfer+0x93a>
 8005150:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005154:	3b01      	subs	r3, #1
 8005156:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800515a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800515e:	b29b      	uxth	r3, r3
 8005160:	029b      	lsls	r3, r3, #10
 8005162:	b29b      	uxth	r3, r3
 8005164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800516c:	b29a      	uxth	r2, r3
 800516e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	e024      	b.n	80051be <USB_EPStartXfer+0x99e>
 8005174:	463b      	mov	r3, r7
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	785b      	ldrb	r3, [r3, #1]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d11f      	bne.n	80051be <USB_EPStartXfer+0x99e>
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518e:	b29b      	uxth	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005196:	4413      	add	r3, r2
 8005198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800519c:	463b      	mov	r3, r7
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	011a      	lsls	r2, r3, #4
 80051a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051a8:	4413      	add	r3, r2
 80051aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80051be:	463b      	mov	r3, r7
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	891b      	ldrh	r3, [r3, #8]
 80051c4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051c8:	463b      	mov	r3, r7
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6959      	ldr	r1, [r3, #20]
 80051ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80051d8:	1d38      	adds	r0, r7, #4
 80051da:	6800      	ldr	r0, [r0, #0]
 80051dc:	f000 fd7e 	bl	8005cdc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80051e0:	463b      	mov	r3, r7
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	785b      	ldrb	r3, [r3, #1]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d122      	bne.n	8005230 <USB_EPStartXfer+0xa10>
 80051ea:	1d3b      	adds	r3, r7, #4
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	463b      	mov	r3, r7
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005204:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005208:	1d3b      	adds	r3, r7, #4
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	463b      	mov	r3, r7
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	441a      	add	r2, r3
 8005216:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800521a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800522a:	b29b      	uxth	r3, r3
 800522c:	8013      	strh	r3, [r2, #0]
 800522e:	e026      	b.n	800527e <USB_EPStartXfer+0xa5e>
 8005230:	463b      	mov	r3, r7
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d121      	bne.n	800527e <USB_EPStartXfer+0xa5e>
 800523a:	1d3b      	adds	r3, r7, #4
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	463b      	mov	r3, r7
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005254:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005258:	1d3b      	adds	r3, r7, #4
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	463b      	mov	r3, r7
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	441a      	add	r2, r3
 8005266:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800526a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800527a:	b29b      	uxth	r3, r3
 800527c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800527e:	1d3b      	adds	r3, r7, #4
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	463b      	mov	r3, r7
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f107 020e 	add.w	r2, r7, #14
 8005294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800529c:	8013      	strh	r3, [r2, #0]
 800529e:	f107 030e 	add.w	r3, r7, #14
 80052a2:	f107 020e 	add.w	r2, r7, #14
 80052a6:	8812      	ldrh	r2, [r2, #0]
 80052a8:	f082 0210 	eor.w	r2, r2, #16
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	f107 030e 	add.w	r3, r7, #14
 80052b2:	f107 020e 	add.w	r2, r7, #14
 80052b6:	8812      	ldrh	r2, [r2, #0]
 80052b8:	f082 0220 	eor.w	r2, r2, #32
 80052bc:	801a      	strh	r2, [r3, #0]
 80052be:	1d3b      	adds	r3, r7, #4
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	463b      	mov	r3, r7
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	441a      	add	r2, r3
 80052cc:	f107 030e 	add.w	r3, r7, #14
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	8013      	strh	r3, [r2, #0]
 80052e6:	e3b5      	b.n	8005a54 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80052e8:	463b      	mov	r3, r7
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	7b1b      	ldrb	r3, [r3, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f040 8090 	bne.w	8005414 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80052f4:	463b      	mov	r3, r7
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	463b      	mov	r3, r7
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	429a      	cmp	r2, r3
 8005302:	d90e      	bls.n	8005322 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005304:	463b      	mov	r3, r7
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800530e:	463b      	mov	r3, r7
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005318:	1ad2      	subs	r2, r2, r3
 800531a:	463b      	mov	r3, r7
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	619a      	str	r2, [r3, #24]
 8005320:	e008      	b.n	8005334 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005322:	463b      	mov	r3, r7
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800532c:	463b      	mov	r3, r7
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2200      	movs	r2, #0
 8005332:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005334:	1d3b      	adds	r3, r7, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800533c:	1d3b      	adds	r3, r7, #4
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005344:	b29b      	uxth	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800534c:	4413      	add	r3, r2
 800534e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005352:	463b      	mov	r3, r7
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	011a      	lsls	r2, r3, #4
 800535a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800535e:	4413      	add	r3, r2
 8005360:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d116      	bne.n	800539e <USB_EPStartXfer+0xb7e>
 8005370:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800537c:	b29a      	uxth	r2, r3
 800537e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005382:	801a      	strh	r2, [r3, #0]
 8005384:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	b29b      	uxth	r3, r3
 800538c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005394:	b29a      	uxth	r2, r3
 8005396:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800539a:	801a      	strh	r2, [r3, #0]
 800539c:	e32c      	b.n	80059f8 <USB_EPStartXfer+0x11d8>
 800539e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a2:	2b3e      	cmp	r3, #62	; 0x3e
 80053a4:	d818      	bhi.n	80053d8 <USB_EPStartXfer+0xbb8>
 80053a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d004      	beq.n	80053c6 <USB_EPStartXfer+0xba6>
 80053bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053c0:	3301      	adds	r3, #1
 80053c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	029b      	lsls	r3, r3, #10
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	e30f      	b.n	80059f8 <USB_EPStartXfer+0x11d8>
 80053d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <USB_EPStartXfer+0xbd8>
 80053ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053f2:	3b01      	subs	r3, #1
 80053f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	029b      	lsls	r3, r3, #10
 8005400:	b29b      	uxth	r3, r3
 8005402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800540a:	b29a      	uxth	r2, r3
 800540c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005410:	801a      	strh	r2, [r3, #0]
 8005412:	e2f1      	b.n	80059f8 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005414:	463b      	mov	r3, r7
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	78db      	ldrb	r3, [r3, #3]
 800541a:	2b02      	cmp	r3, #2
 800541c:	f040 818f 	bne.w	800573e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005420:	463b      	mov	r3, r7
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d175      	bne.n	8005516 <USB_EPStartXfer+0xcf6>
 800542a:	1d3b      	adds	r3, r7, #4
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800543a:	b29b      	uxth	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005442:	4413      	add	r3, r2
 8005444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005448:	463b      	mov	r3, r7
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	011a      	lsls	r2, r3, #4
 8005450:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005454:	4413      	add	r3, r2
 8005456:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800545a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800545e:	463b      	mov	r3, r7
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d116      	bne.n	8005496 <USB_EPStartXfer+0xc76>
 8005468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	b29b      	uxth	r3, r3
 8005470:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005474:	b29a      	uxth	r2, r3
 8005476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800548c:	b29a      	uxth	r2, r3
 800548e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	e065      	b.n	8005562 <USB_EPStartXfer+0xd42>
 8005496:	463b      	mov	r3, r7
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2b3e      	cmp	r3, #62	; 0x3e
 800549e:	d81a      	bhi.n	80054d6 <USB_EPStartXfer+0xcb6>
 80054a0:	463b      	mov	r3, r7
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	085b      	lsrs	r3, r3, #1
 80054a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054ac:	463b      	mov	r3, r7
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <USB_EPStartXfer+0xca4>
 80054ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054be:	3301      	adds	r3, #1
 80054c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	029b      	lsls	r3, r3, #10
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054d2:	801a      	strh	r2, [r3, #0]
 80054d4:	e045      	b.n	8005562 <USB_EPStartXfer+0xd42>
 80054d6:	463b      	mov	r3, r7
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054e2:	463b      	mov	r3, r7
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <USB_EPStartXfer+0xcda>
 80054f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054f4:	3b01      	subs	r3, #1
 80054f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054fe:	b29b      	uxth	r3, r3
 8005500:	029b      	lsls	r3, r3, #10
 8005502:	b29b      	uxth	r3, r3
 8005504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550c:	b29a      	uxth	r2, r3
 800550e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005512:	801a      	strh	r2, [r3, #0]
 8005514:	e025      	b.n	8005562 <USB_EPStartXfer+0xd42>
 8005516:	463b      	mov	r3, r7
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d120      	bne.n	8005562 <USB_EPStartXfer+0xd42>
 8005520:	1d3b      	adds	r3, r7, #4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005528:	1d3b      	adds	r3, r7, #4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005530:	b29b      	uxth	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005538:	4413      	add	r3, r2
 800553a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800553e:	463b      	mov	r3, r7
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	011a      	lsls	r2, r3, #4
 8005546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800554a:	4413      	add	r3, r2
 800554c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005554:	463b      	mov	r3, r7
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	b29a      	uxth	r2, r3
 800555c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005560:	801a      	strh	r2, [r3, #0]
 8005562:	1d3b      	adds	r3, r7, #4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800556a:	463b      	mov	r3, r7
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d175      	bne.n	8005660 <USB_EPStartXfer+0xe40>
 8005574:	1d3b      	adds	r3, r7, #4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800557c:	1d3b      	adds	r3, r7, #4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005584:	b29b      	uxth	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800558c:	4413      	add	r3, r2
 800558e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005592:	463b      	mov	r3, r7
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	011a      	lsls	r2, r3, #4
 800559a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800559e:	4413      	add	r3, r2
 80055a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055a8:	463b      	mov	r3, r7
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d116      	bne.n	80055e0 <USB_EPStartXfer+0xdc0>
 80055b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055be:	b29a      	uxth	r2, r3
 80055c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055c4:	801a      	strh	r2, [r3, #0]
 80055c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	e061      	b.n	80056a4 <USB_EPStartXfer+0xe84>
 80055e0:	463b      	mov	r3, r7
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b3e      	cmp	r3, #62	; 0x3e
 80055e8:	d81a      	bhi.n	8005620 <USB_EPStartXfer+0xe00>
 80055ea:	463b      	mov	r3, r7
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055f6:	463b      	mov	r3, r7
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d004      	beq.n	800560e <USB_EPStartXfer+0xdee>
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005608:	3301      	adds	r3, #1
 800560a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800560e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005612:	b29b      	uxth	r3, r3
 8005614:	029b      	lsls	r3, r3, #10
 8005616:	b29a      	uxth	r2, r3
 8005618:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	e041      	b.n	80056a4 <USB_EPStartXfer+0xe84>
 8005620:	463b      	mov	r3, r7
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800562c:	463b      	mov	r3, r7
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	2b00      	cmp	r3, #0
 8005638:	d104      	bne.n	8005644 <USB_EPStartXfer+0xe24>
 800563a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563e:	3b01      	subs	r3, #1
 8005640:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005648:	b29b      	uxth	r3, r3
 800564a:	029b      	lsls	r3, r3, #10
 800564c:	b29b      	uxth	r3, r3
 800564e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005656:	b29a      	uxth	r2, r3
 8005658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800565c:	801a      	strh	r2, [r3, #0]
 800565e:	e021      	b.n	80056a4 <USB_EPStartXfer+0xe84>
 8005660:	463b      	mov	r3, r7
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d11c      	bne.n	80056a4 <USB_EPStartXfer+0xe84>
 800566a:	1d3b      	adds	r3, r7, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005672:	b29b      	uxth	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800567a:	4413      	add	r3, r2
 800567c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005680:	463b      	mov	r3, r7
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	011a      	lsls	r2, r3, #4
 8005688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800568c:	4413      	add	r3, r2
 800568e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005696:	463b      	mov	r3, r7
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	b29a      	uxth	r2, r3
 800569e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056a2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80056a4:	463b      	mov	r3, r7
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 81a4 	beq.w	80059f8 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80056b0:	1d3b      	adds	r3, r7, #4
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	463b      	mov	r3, r7
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056c4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80056c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d005      	beq.n	80056dc <USB_EPStartXfer+0xebc>
 80056d0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10d      	bne.n	80056f8 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056dc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80056e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f040 8187 	bne.w	80059f8 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056ea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 8180 	bne.w	80059f8 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80056f8:	1d3b      	adds	r3, r7, #4
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	463b      	mov	r3, r7
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005716:	1d3b      	adds	r3, r7, #4
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	463b      	mov	r3, r7
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	441a      	add	r2, r3
 8005724:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005734:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005738:	b29b      	uxth	r3, r3
 800573a:	8013      	strh	r3, [r2, #0]
 800573c:	e15c      	b.n	80059f8 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800573e:	463b      	mov	r3, r7
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	78db      	ldrb	r3, [r3, #3]
 8005744:	2b01      	cmp	r3, #1
 8005746:	f040 8155 	bne.w	80059f4 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800574a:	463b      	mov	r3, r7
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699a      	ldr	r2, [r3, #24]
 8005750:	463b      	mov	r3, r7
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	429a      	cmp	r2, r3
 8005758:	d90e      	bls.n	8005778 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800575a:	463b      	mov	r3, r7
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005764:	463b      	mov	r3, r7
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800576e:	1ad2      	subs	r2, r2, r3
 8005770:	463b      	mov	r3, r7
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	619a      	str	r2, [r3, #24]
 8005776:	e008      	b.n	800578a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005778:	463b      	mov	r3, r7
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005782:	463b      	mov	r3, r7
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2200      	movs	r2, #0
 8005788:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800578a:	463b      	mov	r3, r7
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d16f      	bne.n	8005874 <USB_EPStartXfer+0x1054>
 8005794:	1d3b      	adds	r3, r7, #4
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800579c:	1d3b      	adds	r3, r7, #4
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80057ac:	4413      	add	r3, r2
 80057ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057b2:	463b      	mov	r3, r7
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	011a      	lsls	r2, r3, #4
 80057ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80057be:	4413      	add	r3, r2
 80057c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d116      	bne.n	80057fe <USB_EPStartXfer+0xfde>
 80057d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057dc:	b29a      	uxth	r2, r3
 80057de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057e2:	801a      	strh	r2, [r3, #0]
 80057e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057fa:	801a      	strh	r2, [r3, #0]
 80057fc:	e05f      	b.n	80058be <USB_EPStartXfer+0x109e>
 80057fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005802:	2b3e      	cmp	r3, #62	; 0x3e
 8005804:	d818      	bhi.n	8005838 <USB_EPStartXfer+0x1018>
 8005806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d004      	beq.n	8005826 <USB_EPStartXfer+0x1006>
 800581c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005820:	3301      	adds	r3, #1
 8005822:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800582a:	b29b      	uxth	r3, r3
 800582c:	029b      	lsls	r3, r3, #10
 800582e:	b29a      	uxth	r2, r3
 8005830:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	e042      	b.n	80058be <USB_EPStartXfer+0x109e>
 8005838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800583c:	095b      	lsrs	r3, r3, #5
 800583e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	2b00      	cmp	r3, #0
 800584c:	d104      	bne.n	8005858 <USB_EPStartXfer+0x1038>
 800584e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005852:	3b01      	subs	r3, #1
 8005854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800585c:	b29b      	uxth	r3, r3
 800585e:	029b      	lsls	r3, r3, #10
 8005860:	b29b      	uxth	r3, r3
 8005862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586a:	b29a      	uxth	r2, r3
 800586c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	e024      	b.n	80058be <USB_EPStartXfer+0x109e>
 8005874:	463b      	mov	r3, r7
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d11f      	bne.n	80058be <USB_EPStartXfer+0x109e>
 800587e:	1d3b      	adds	r3, r7, #4
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005886:	1d3b      	adds	r3, r7, #4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800588e:	b29b      	uxth	r3, r3
 8005890:	461a      	mov	r2, r3
 8005892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005896:	4413      	add	r3, r2
 8005898:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800589c:	463b      	mov	r3, r7
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	011a      	lsls	r2, r3, #4
 80058a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058a8:	4413      	add	r3, r2
 80058aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80058b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058c6:	463b      	mov	r3, r7
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d16f      	bne.n	80059b0 <USB_EPStartXfer+0x1190>
 80058d0:	1d3b      	adds	r3, r7, #4
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058e8:	4413      	add	r3, r2
 80058ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058ee:	463b      	mov	r3, r7
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	011a      	lsls	r2, r3, #4
 80058f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058fa:	4413      	add	r3, r2
 80058fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d116      	bne.n	800593a <USB_EPStartXfer+0x111a>
 800590c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	b29b      	uxth	r3, r3
 8005914:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005918:	b29a      	uxth	r2, r3
 800591a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800591e:	801a      	strh	r2, [r3, #0]
 8005920:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005930:	b29a      	uxth	r2, r3
 8005932:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	e05e      	b.n	80059f8 <USB_EPStartXfer+0x11d8>
 800593a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800593e:	2b3e      	cmp	r3, #62	; 0x3e
 8005940:	d818      	bhi.n	8005974 <USB_EPStartXfer+0x1154>
 8005942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005946:	085b      	lsrs	r3, r3, #1
 8005948:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800594c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d004      	beq.n	8005962 <USB_EPStartXfer+0x1142>
 8005958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800595c:	3301      	adds	r3, #1
 800595e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005966:	b29b      	uxth	r3, r3
 8005968:	029b      	lsls	r3, r3, #10
 800596a:	b29a      	uxth	r2, r3
 800596c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	e041      	b.n	80059f8 <USB_EPStartXfer+0x11d8>
 8005974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800597e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	2b00      	cmp	r3, #0
 8005988:	d104      	bne.n	8005994 <USB_EPStartXfer+0x1174>
 800598a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800598e:	3b01      	subs	r3, #1
 8005990:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005998:	b29b      	uxth	r3, r3
 800599a:	029b      	lsls	r3, r3, #10
 800599c:	b29b      	uxth	r3, r3
 800599e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059ac:	801a      	strh	r2, [r3, #0]
 80059ae:	e023      	b.n	80059f8 <USB_EPStartXfer+0x11d8>
 80059b0:	463b      	mov	r3, r7
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d11e      	bne.n	80059f8 <USB_EPStartXfer+0x11d8>
 80059ba:	1d3b      	adds	r3, r7, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059ca:	4413      	add	r3, r2
 80059cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059d0:	463b      	mov	r3, r7
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	011a      	lsls	r2, r3, #4
 80059d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059dc:	4413      	add	r3, r2
 80059de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059f0:	801a      	strh	r2, [r3, #0]
 80059f2:	e001      	b.n	80059f8 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e02e      	b.n	8005a56 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059f8:	1d3b      	adds	r3, r7, #4
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	463b      	mov	r3, r7
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005a16:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005a1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a1e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005a22:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005a26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a2a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005a2e:	1d3b      	adds	r3, r7, #4
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	463b      	mov	r3, r7
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	441a      	add	r2, r3
 8005a3c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d020      	beq.n	8005ab4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a88:	81bb      	strh	r3, [r7, #12]
 8005a8a:	89bb      	ldrh	r3, [r7, #12]
 8005a8c:	f083 0310 	eor.w	r3, r3, #16
 8005a90:	81bb      	strh	r3, [r7, #12]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	441a      	add	r2, r3
 8005a9c:	89bb      	ldrh	r3, [r7, #12]
 8005a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	8013      	strh	r3, [r2, #0]
 8005ab2:	e01f      	b.n	8005af4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	81fb      	strh	r3, [r7, #14]
 8005acc:	89fb      	ldrh	r3, [r7, #14]
 8005ace:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ad2:	81fb      	strh	r3, [r7, #14]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	441a      	add	r2, r3
 8005ade:	89fb      	ldrh	r3, [r7, #14]
 8005ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bc80      	pop	{r7}
 8005afe:	4770      	bx	lr

08005b00 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	7b1b      	ldrb	r3, [r3, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f040 809d 	bne.w	8005c4e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d04c      	beq.n	8005bb6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	823b      	strh	r3, [r7, #16]
 8005b2a:	8a3b      	ldrh	r3, [r7, #16]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01b      	beq.n	8005b6c <USB_EPClearStall+0x6c>
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4a:	81fb      	strh	r3, [r7, #14]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	89fb      	ldrh	r3, [r7, #14]
 8005b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	78db      	ldrb	r3, [r3, #3]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d06c      	beq.n	8005c4e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8a:	81bb      	strh	r3, [r7, #12]
 8005b8c:	89bb      	ldrh	r3, [r7, #12]
 8005b8e:	f083 0320 	eor.w	r3, r3, #32
 8005b92:	81bb      	strh	r3, [r7, #12]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	441a      	add	r2, r3
 8005b9e:	89bb      	ldrh	r3, [r7, #12]
 8005ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	8013      	strh	r3, [r2, #0]
 8005bb4:	e04b      	b.n	8005c4e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	82fb      	strh	r3, [r7, #22]
 8005bc4:	8afb      	ldrh	r3, [r7, #22]
 8005bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d01b      	beq.n	8005c06 <USB_EPClearStall+0x106>
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be4:	82bb      	strh	r3, [r7, #20]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	441a      	add	r2, r3
 8005bf0:	8abb      	ldrh	r3, [r7, #20]
 8005bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1c:	827b      	strh	r3, [r7, #18]
 8005c1e:	8a7b      	ldrh	r3, [r7, #18]
 8005c20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c24:	827b      	strh	r3, [r7, #18]
 8005c26:	8a7b      	ldrh	r3, [r7, #18]
 8005c28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c2c:	827b      	strh	r3, [r7, #18]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	441a      	add	r2, r3
 8005c38:	8a7b      	ldrh	r3, [r7, #18]
 8005c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr

08005c5a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d103      	bne.n	8005c74 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2280      	movs	r2, #128	; 0x80
 8005c70:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr

08005c80 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr

08005c94 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005cba:	68fb      	ldr	r3, [r7, #12]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr

08005cc6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b08d      	sub	sp, #52	; 0x34
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	461a      	mov	r2, r3
 8005cea:	460b      	mov	r3, r1
 8005cec:	80fb      	strh	r3, [r7, #6]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005cf2:	88bb      	ldrh	r3, [r7, #4]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	005a      	lsls	r2, r3, #1
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d14:	e01e      	b.n	8005d54 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	3301      	adds	r3, #1
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	021b      	lsls	r3, r3, #8
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	3302      	adds	r3, #2
 8005d40:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	3302      	adds	r3, #2
 8005d46:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	3b01      	subs	r3, #1
 8005d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1dd      	bne.n	8005d16 <USB_WritePMA+0x3a>
  }
}
 8005d5a:	bf00      	nop
 8005d5c:	3734      	adds	r7, #52	; 0x34
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr

08005d64 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b08b      	sub	sp, #44	; 0x2c
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4611      	mov	r1, r2
 8005d70:	461a      	mov	r2, r3
 8005d72:	460b      	mov	r3, r1
 8005d74:	80fb      	strh	r3, [r7, #6]
 8005d76:	4613      	mov	r3, r2
 8005d78:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005d7a:	88bb      	ldrh	r3, [r7, #4]
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d8a:	88fb      	ldrh	r3, [r7, #6]
 8005d8c:	005a      	lsls	r2, r3, #1
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d96:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9c:	e01b      	b.n	8005dd6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	3302      	adds	r3, #2
 8005daa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	3301      	adds	r3, #1
 8005db8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	0a1b      	lsrs	r3, r3, #8
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	3302      	adds	r3, #2
 8005dce:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e0      	bne.n	8005d9e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005ddc:	88bb      	ldrh	r3, [r7, #4]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d007      	beq.n	8005df8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	701a      	strb	r2, [r3, #0]
  }
}
 8005df8:	bf00      	nop
 8005dfa:	372c      	adds	r7, #44	; 0x2c
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc80      	pop	{r7}
 8005e00:	4770      	bx	lr

08005e02 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	7c1b      	ldrb	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d115      	bne.n	8005e46 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e1e:	2202      	movs	r2, #2
 8005e20:	2181      	movs	r1, #129	; 0x81
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f001 fe1f 	bl	8007a66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e32:	2202      	movs	r2, #2
 8005e34:	2101      	movs	r1, #1
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 fe15 	bl	8007a66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005e44:	e012      	b.n	8005e6c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e46:	2340      	movs	r3, #64	; 0x40
 8005e48:	2202      	movs	r2, #2
 8005e4a:	2181      	movs	r1, #129	; 0x81
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 fe0a 	bl	8007a66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e58:	2340      	movs	r3, #64	; 0x40
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 fe01 	bl	8007a66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	2203      	movs	r2, #3
 8005e70:	2182      	movs	r1, #130	; 0x82
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f001 fdf7 	bl	8007a66 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e7e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e82:	f001 ff17 	bl	8007cb4 <USBD_static_malloc>
 8005e86:	4602      	mov	r2, r0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d102      	bne.n	8005e9e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	73fb      	strb	r3, [r7, #15]
 8005e9c:	e026      	b.n	8005eec <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	7c1b      	ldrb	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 feb7 	bl	8007c48 <USBD_LL_PrepareReceive>
 8005eda:	e007      	b.n	8005eec <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ee2:	2340      	movs	r3, #64	; 0x40
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f001 feae 	bl	8007c48 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f06:	2181      	movs	r1, #129	; 0x81
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 fdd2 	bl	8007ab2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f14:	2101      	movs	r1, #1
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f001 fdcb 	bl	8007ab2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f24:	2182      	movs	r1, #130	; 0x82
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 fdc3 	bl	8007ab2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00e      	beq.n	8005f5a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 febd 	bl	8007ccc <USBD_static_free>
    pdev->pClassData = NULL;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f74:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d039      	beq.n	8006002 <USBD_CDC_Setup+0x9e>
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d17c      	bne.n	800608c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	88db      	ldrh	r3, [r3, #6]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d029      	beq.n	8005fee <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	b25b      	sxtb	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	da11      	bge.n	8005fc8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005fb0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	88d2      	ldrh	r2, [r2, #6]
 8005fb6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005fb8:	6939      	ldr	r1, [r7, #16]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	88db      	ldrh	r3, [r3, #6]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 f9c9 	bl	8007358 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005fc6:	e068      	b.n	800609a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	785a      	ldrb	r2, [r3, #1]
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	88db      	ldrh	r3, [r3, #6]
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005fde:	6939      	ldr	r1, [r7, #16]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	88db      	ldrh	r3, [r3, #6]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f001 f9e4 	bl	80073b4 <USBD_CtlPrepareRx>
      break;
 8005fec:	e055      	b.n	800609a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	7850      	ldrb	r0, [r2, #1]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	4798      	blx	r3
      break;
 8006000:	e04b      	b.n	800609a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b0a      	cmp	r3, #10
 8006008:	d017      	beq.n	800603a <USBD_CDC_Setup+0xd6>
 800600a:	2b0b      	cmp	r3, #11
 800600c:	d029      	beq.n	8006062 <USBD_CDC_Setup+0xfe>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d133      	bne.n	800607a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006018:	2b03      	cmp	r3, #3
 800601a:	d107      	bne.n	800602c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800601c:	f107 030c 	add.w	r3, r7, #12
 8006020:	2202      	movs	r2, #2
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f001 f997 	bl	8007358 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800602a:	e02e      	b.n	800608a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 f928 	bl	8007284 <USBD_CtlError>
            ret = USBD_FAIL;
 8006034:	2302      	movs	r3, #2
 8006036:	75fb      	strb	r3, [r7, #23]
          break;
 8006038:	e027      	b.n	800608a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006040:	2b03      	cmp	r3, #3
 8006042:	d107      	bne.n	8006054 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006044:	f107 030f 	add.w	r3, r7, #15
 8006048:	2201      	movs	r2, #1
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 f983 	bl	8007358 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006052:	e01a      	b.n	800608a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f001 f914 	bl	8007284 <USBD_CtlError>
            ret = USBD_FAIL;
 800605c:	2302      	movs	r3, #2
 800605e:	75fb      	strb	r3, [r7, #23]
          break;
 8006060:	e013      	b.n	800608a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006068:	2b03      	cmp	r3, #3
 800606a:	d00d      	beq.n	8006088 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f001 f908 	bl	8007284 <USBD_CtlError>
            ret = USBD_FAIL;
 8006074:	2302      	movs	r3, #2
 8006076:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006078:	e006      	b.n	8006088 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f001 f901 	bl	8007284 <USBD_CtlError>
          ret = USBD_FAIL;
 8006082:	2302      	movs	r3, #2
 8006084:	75fb      	strb	r3, [r7, #23]
          break;
 8006086:	e000      	b.n	800608a <USBD_CDC_Setup+0x126>
          break;
 8006088:	bf00      	nop
      }
      break;
 800608a:	e006      	b.n	800609a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 f8f8 	bl	8007284 <USBD_CtlError>
      ret = USBD_FAIL;
 8006094:	2302      	movs	r3, #2
 8006096:	75fb      	strb	r3, [r7, #23]
      break;
 8006098:	bf00      	nop
  }

  return ret;
 800609a:	7dfb      	ldrb	r3, [r7, #23]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060be:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d03a      	beq.n	8006140 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80060ca:	78fa      	ldrb	r2, [r7, #3]
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	440b      	add	r3, r1
 80060d8:	331c      	adds	r3, #28
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d029      	beq.n	8006134 <USBD_CDC_DataIn+0x90>
 80060e0:	78fa      	ldrb	r2, [r7, #3]
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	440b      	add	r3, r1
 80060ee:	331c      	adds	r3, #28
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	78f9      	ldrb	r1, [r7, #3]
 80060f4:	68b8      	ldr	r0, [r7, #8]
 80060f6:	460b      	mov	r3, r1
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	4403      	add	r3, r0
 8006100:	3338      	adds	r3, #56	; 0x38
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	fbb2 f1f3 	udiv	r1, r2, r3
 8006108:	fb03 f301 	mul.w	r3, r3, r1
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d110      	bne.n	8006134 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006112:	78fa      	ldrb	r2, [r7, #3]
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	331c      	adds	r3, #28
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006126:	78f9      	ldrb	r1, [r7, #3]
 8006128:	2300      	movs	r3, #0
 800612a:	2200      	movs	r2, #0
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f001 fd68 	bl	8007c02 <USBD_LL_Transmit>
 8006132:	e003      	b.n	800613c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	e000      	b.n	8006142 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006140:	2302      	movs	r3, #2
  }
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f001 fd93 	bl	8007c8e <USBD_LL_GetRxDataSize>
 8006168:	4602      	mov	r2, r0
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00d      	beq.n	8006196 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800618e:	4611      	mov	r1, r2
 8006190:	4798      	blx	r3

    return USBD_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	e000      	b.n	8006198 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006196:	2302      	movs	r3, #2
  }
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d015      	beq.n	80061e6 <USBD_CDC_EP0_RxReady+0x46>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80061c0:	2bff      	cmp	r3, #255	; 0xff
 80061c2:	d010      	beq.n	80061e6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80061d2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061da:	b292      	uxth	r2, r2
 80061dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	22ff      	movs	r2, #255	; 0xff
 80061e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2243      	movs	r2, #67	; 0x43
 80061fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80061fe:	4b03      	ldr	r3, [pc, #12]	; (800620c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	bc80      	pop	{r7}
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	20000094 	.word	0x20000094

08006210 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2243      	movs	r2, #67	; 0x43
 800621c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800621e:	4b03      	ldr	r3, [pc, #12]	; (800622c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	20000050 	.word	0x20000050

08006230 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2243      	movs	r2, #67	; 0x43
 800623c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800623e:	4b03      	ldr	r3, [pc, #12]	; (800624c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006240:	4618      	mov	r0, r3
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	200000d8 	.word	0x200000d8

08006250 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	220a      	movs	r2, #10
 800625c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800625e:	4b03      	ldr	r3, [pc, #12]	; (800626c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	2000000c 	.word	0x2000000c

08006270 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800627a:	2302      	movs	r3, #2
 800627c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006290:	7bfb      	ldrb	r3, [r7, #15]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	bc80      	pop	{r7}
 800629a:	4770      	bx	lr

0800629c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	4613      	mov	r3, r2
 80062a8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80062ba:	88fa      	ldrh	r2, [r7, #6]
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bc80      	pop	{r7}
 80062cc:	4770      	bx	lr

080062ce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062de:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006302:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d017      	beq.n	800633e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	7c1b      	ldrb	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d109      	bne.n	800632a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800631c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006320:	2101      	movs	r1, #1
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 fc90 	bl	8007c48 <USBD_LL_PrepareReceive>
 8006328:	e007      	b.n	800633a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006330:	2340      	movs	r3, #64	; 0x40
 8006332:	2101      	movs	r1, #1
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 fc87 	bl	8007c48 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	e000      	b.n	8006340 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800633e:	2302      	movs	r3, #2
  }
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800635c:	2302      	movs	r3, #2
 800635e:	e01a      	b.n	8006396 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	79fa      	ldrb	r2, [r7, #7]
 800638c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f001 faf4 	bl	800797c <USBD_LL_Init>

  return USBD_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d006      	beq.n	80063c0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	73fb      	strb	r3, [r7, #15]
 80063be:	e001      	b.n	80063c4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80063c0:	2302      	movs	r3, #2
 80063c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr

080063d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 fb29 	bl	8007a30 <USBD_LL_Start>

  return USBD_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr

080063fc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006408:	2302      	movs	r3, #2
 800640a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00c      	beq.n	8006430 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	78fa      	ldrb	r2, [r7, #3]
 8006420:	4611      	mov	r1, r2
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	4798      	blx	r3
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006430:	7bfb      	ldrb	r3, [r7, #15]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	78fa      	ldrb	r2, [r7, #3]
 8006450:	4611      	mov	r1, r2
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	4798      	blx	r3

  return USBD_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f000 feca 	bl	800720c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006486:	461a      	mov	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006494:	f003 031f 	and.w	r3, r3, #31
 8006498:	2b01      	cmp	r3, #1
 800649a:	d00c      	beq.n	80064b6 <USBD_LL_SetupStage+0x56>
 800649c:	2b01      	cmp	r3, #1
 800649e:	d302      	bcc.n	80064a6 <USBD_LL_SetupStage+0x46>
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d010      	beq.n	80064c6 <USBD_LL_SetupStage+0x66>
 80064a4:	e017      	b.n	80064d6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f9ca 	bl	8006848 <USBD_StdDevReq>
      break;
 80064b4:	e01a      	b.n	80064ec <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fa2c 	bl	800691c <USBD_StdItfReq>
      break;
 80064c4:	e012      	b.n	80064ec <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa6a 	bl	80069a8 <USBD_StdEPReq>
      break;
 80064d4:	e00a      	b.n	80064ec <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 fb03 	bl	8007af0 <USBD_LL_StallEP>
      break;
 80064ea:	bf00      	nop
  }

  return USBD_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b086      	sub	sp, #24
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	460b      	mov	r3, r1
 8006500:	607a      	str	r2, [r7, #4]
 8006502:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006504:	7afb      	ldrb	r3, [r7, #11]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d14b      	bne.n	80065a2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006510:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006518:	2b03      	cmp	r3, #3
 800651a:	d134      	bne.n	8006586 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	429a      	cmp	r2, r3
 8006526:	d919      	bls.n	800655c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	1ad2      	subs	r2, r2, r3
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800653e:	429a      	cmp	r2, r3
 8006540:	d203      	bcs.n	800654a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006546:	b29b      	uxth	r3, r3
 8006548:	e002      	b.n	8006550 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800654e:	b29b      	uxth	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 ff4b 	bl	80073f0 <USBD_CtlContinueRx>
 800655a:	e038      	b.n	80065ce <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00a      	beq.n	800657e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800656e:	2b03      	cmp	r3, #3
 8006570:	d105      	bne.n	800657e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 ff48 	bl	8007414 <USBD_CtlSendStatus>
 8006584:	e023      	b.n	80065ce <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800658c:	2b05      	cmp	r3, #5
 800658e:	d11e      	bne.n	80065ce <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006598:	2100      	movs	r1, #0
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f001 faa8 	bl	8007af0 <USBD_LL_StallEP>
 80065a0:	e015      	b.n	80065ce <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00d      	beq.n	80065ca <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d108      	bne.n	80065ca <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	7afa      	ldrb	r2, [r7, #11]
 80065c2:	4611      	mov	r1, r2
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	4798      	blx	r3
 80065c8:	e001      	b.n	80065ce <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80065ca:	2302      	movs	r3, #2
 80065cc:	e000      	b.n	80065d0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	460b      	mov	r3, r1
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80065e6:	7afb      	ldrb	r3, [r7, #11]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d17f      	bne.n	80066ec <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3314      	adds	r3, #20
 80065f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d15c      	bne.n	80066b6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	429a      	cmp	r2, r3
 8006606:	d915      	bls.n	8006634 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	1ad2      	subs	r2, r2, r3
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	b29b      	uxth	r3, r3
 800661c:	461a      	mov	r2, r3
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 feb5 	bl	8007390 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006626:	2300      	movs	r3, #0
 8006628:	2200      	movs	r2, #0
 800662a:	2100      	movs	r1, #0
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f001 fb0b 	bl	8007c48 <USBD_LL_PrepareReceive>
 8006632:	e04e      	b.n	80066d2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	6912      	ldr	r2, [r2, #16]
 800663c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006640:	fb02 f201 	mul.w	r2, r2, r1
 8006644:	1a9b      	subs	r3, r3, r2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d11c      	bne.n	8006684 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006652:	429a      	cmp	r2, r3
 8006654:	d316      	bcc.n	8006684 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	689a      	ldr	r2, [r3, #8]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006660:	429a      	cmp	r2, r3
 8006662:	d20f      	bcs.n	8006684 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006664:	2200      	movs	r2, #0
 8006666:	2100      	movs	r1, #0
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fe91 	bl	8007390 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006676:	2300      	movs	r3, #0
 8006678:	2200      	movs	r2, #0
 800667a:	2100      	movs	r1, #0
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f001 fae3 	bl	8007c48 <USBD_LL_PrepareReceive>
 8006682:	e026      	b.n	80066d2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006696:	2b03      	cmp	r3, #3
 8006698:	d105      	bne.n	80066a6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80066a6:	2180      	movs	r1, #128	; 0x80
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f001 fa21 	bl	8007af0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fec3 	bl	800743a <USBD_CtlReceiveStatus>
 80066b4:	e00d      	b.n	80066d2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d004      	beq.n	80066ca <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d103      	bne.n	80066d2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80066ca:	2180      	movs	r1, #128	; 0x80
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f001 fa0f 	bl	8007af0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d11d      	bne.n	8006718 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff fe83 	bl	80063e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066ea:	e015      	b.n	8006718 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00d      	beq.n	8006714 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d108      	bne.n	8006714 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	7afa      	ldrb	r2, [r7, #11]
 800670c:	4611      	mov	r1, r2
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	4798      	blx	r3
 8006712:	e001      	b.n	8006718 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006714:	2302      	movs	r3, #2
 8006716:	e000      	b.n	800671a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800672a:	2340      	movs	r3, #64	; 0x40
 800672c:	2200      	movs	r2, #0
 800672e:	2100      	movs	r1, #0
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 f998 	bl	8007a66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2240      	movs	r2, #64	; 0x40
 8006742:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006746:	2340      	movs	r3, #64	; 0x40
 8006748:	2200      	movs	r2, #0
 800674a:	2180      	movs	r1, #128	; 0x80
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 f98a 	bl	8007a66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2240      	movs	r2, #64	; 0x40
 800675c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006782:	2b00      	cmp	r3, #0
 8006784:	d009      	beq.n	800679a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6852      	ldr	r2, [r2, #4]
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	4611      	mov	r1, r2
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4798      	blx	r3
  }

  return USBD_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	78fa      	ldrb	r2, [r7, #3]
 80067b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2204      	movs	r2, #4
 80067da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr

080067ea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d105      	bne.n	8006808 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr

08006814 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006822:	2b03      	cmp	r3, #3
 8006824:	d10b      	bne.n	800683e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d005      	beq.n	800683e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800685e:	2b20      	cmp	r3, #32
 8006860:	d004      	beq.n	800686c <USBD_StdDevReq+0x24>
 8006862:	2b40      	cmp	r3, #64	; 0x40
 8006864:	d002      	beq.n	800686c <USBD_StdDevReq+0x24>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d008      	beq.n	800687c <USBD_StdDevReq+0x34>
 800686a:	e04c      	b.n	8006906 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	4798      	blx	r3
      break;
 800687a:	e049      	b.n	8006910 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	785b      	ldrb	r3, [r3, #1]
 8006880:	2b09      	cmp	r3, #9
 8006882:	d83a      	bhi.n	80068fa <USBD_StdDevReq+0xb2>
 8006884:	a201      	add	r2, pc, #4	; (adr r2, 800688c <USBD_StdDevReq+0x44>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	080068dd 	.word	0x080068dd
 8006890:	080068f1 	.word	0x080068f1
 8006894:	080068fb 	.word	0x080068fb
 8006898:	080068e7 	.word	0x080068e7
 800689c:	080068fb 	.word	0x080068fb
 80068a0:	080068bf 	.word	0x080068bf
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068fb 	.word	0x080068fb
 80068ac:	080068d3 	.word	0x080068d3
 80068b0:	080068c9 	.word	0x080068c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f9d4 	bl	8006c64 <USBD_GetDescriptor>
          break;
 80068bc:	e022      	b.n	8006904 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fb37 	bl	8006f34 <USBD_SetAddress>
          break;
 80068c6:	e01d      	b.n	8006904 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fb74 	bl	8006fb8 <USBD_SetConfig>
          break;
 80068d0:	e018      	b.n	8006904 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fbfd 	bl	80070d4 <USBD_GetConfig>
          break;
 80068da:	e013      	b.n	8006904 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fc2c 	bl	800713c <USBD_GetStatus>
          break;
 80068e4:	e00e      	b.n	8006904 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fc5a 	bl	80071a2 <USBD_SetFeature>
          break;
 80068ee:	e009      	b.n	8006904 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fc69 	bl	80071ca <USBD_ClrFeature>
          break;
 80068f8:	e004      	b.n	8006904 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fcc1 	bl	8007284 <USBD_CtlError>
          break;
 8006902:	bf00      	nop
      }
      break;
 8006904:	e004      	b.n	8006910 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fcbb 	bl	8007284 <USBD_CtlError>
      break;
 800690e:	bf00      	nop
  }

  return ret;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop

0800691c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006932:	2b20      	cmp	r3, #32
 8006934:	d003      	beq.n	800693e <USBD_StdItfReq+0x22>
 8006936:	2b40      	cmp	r3, #64	; 0x40
 8006938:	d001      	beq.n	800693e <USBD_StdItfReq+0x22>
 800693a:	2b00      	cmp	r3, #0
 800693c:	d12a      	bne.n	8006994 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006944:	3b01      	subs	r3, #1
 8006946:	2b02      	cmp	r3, #2
 8006948:	d81d      	bhi.n	8006986 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	889b      	ldrh	r3, [r3, #4]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b01      	cmp	r3, #1
 8006952:	d813      	bhi.n	800697c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
 8006962:	4603      	mov	r3, r0
 8006964:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	88db      	ldrh	r3, [r3, #6]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d110      	bne.n	8006990 <USBD_StdItfReq+0x74>
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10d      	bne.n	8006990 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fd4d 	bl	8007414 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800697a:	e009      	b.n	8006990 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fc80 	bl	8007284 <USBD_CtlError>
          break;
 8006984:	e004      	b.n	8006990 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fc7b 	bl	8007284 <USBD_CtlError>
          break;
 800698e:	e000      	b.n	8006992 <USBD_StdItfReq+0x76>
          break;
 8006990:	bf00      	nop
      }
      break;
 8006992:	e004      	b.n	800699e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fc74 	bl	8007284 <USBD_CtlError>
      break;
 800699c:	bf00      	nop
  }

  return USBD_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	889b      	ldrh	r3, [r3, #4]
 80069ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d004      	beq.n	80069d2 <USBD_StdEPReq+0x2a>
 80069c8:	2b40      	cmp	r3, #64	; 0x40
 80069ca:	d002      	beq.n	80069d2 <USBD_StdEPReq+0x2a>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d008      	beq.n	80069e2 <USBD_StdEPReq+0x3a>
 80069d0:	e13d      	b.n	8006c4e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	4798      	blx	r3
      break;
 80069e0:	e13a      	b.n	8006c58 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d10a      	bne.n	8006a04 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	4798      	blx	r3
 80069fc:	4603      	mov	r3, r0
 80069fe:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	e12a      	b.n	8006c5a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	785b      	ldrb	r3, [r3, #1]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d03e      	beq.n	8006a8a <USBD_StdEPReq+0xe2>
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d002      	beq.n	8006a16 <USBD_StdEPReq+0x6e>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d070      	beq.n	8006af6 <USBD_StdEPReq+0x14e>
 8006a14:	e115      	b.n	8006c42 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d002      	beq.n	8006a26 <USBD_StdEPReq+0x7e>
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d015      	beq.n	8006a50 <USBD_StdEPReq+0xa8>
 8006a24:	e02b      	b.n	8006a7e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a26:	7bbb      	ldrb	r3, [r7, #14]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00c      	beq.n	8006a46 <USBD_StdEPReq+0x9e>
 8006a2c:	7bbb      	ldrb	r3, [r7, #14]
 8006a2e:	2b80      	cmp	r3, #128	; 0x80
 8006a30:	d009      	beq.n	8006a46 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 f85a 	bl	8007af0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006a3c:	2180      	movs	r1, #128	; 0x80
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 f856 	bl	8007af0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a44:	e020      	b.n	8006a88 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fc1b 	bl	8007284 <USBD_CtlError>
              break;
 8006a4e:	e01b      	b.n	8006a88 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	885b      	ldrh	r3, [r3, #2]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10e      	bne.n	8006a76 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00b      	beq.n	8006a76 <USBD_StdEPReq+0xce>
 8006a5e:	7bbb      	ldrb	r3, [r7, #14]
 8006a60:	2b80      	cmp	r3, #128	; 0x80
 8006a62:	d008      	beq.n	8006a76 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	88db      	ldrh	r3, [r3, #6]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006a6c:	7bbb      	ldrb	r3, [r7, #14]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 f83d 	bl	8007af0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fccc 	bl	8007414 <USBD_CtlSendStatus>

              break;
 8006a7c:	e004      	b.n	8006a88 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fbff 	bl	8007284 <USBD_CtlError>
              break;
 8006a86:	bf00      	nop
          }
          break;
 8006a88:	e0e0      	b.n	8006c4c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d002      	beq.n	8006a9a <USBD_StdEPReq+0xf2>
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d015      	beq.n	8006ac4 <USBD_StdEPReq+0x11c>
 8006a98:	e026      	b.n	8006ae8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a9a:	7bbb      	ldrb	r3, [r7, #14]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00c      	beq.n	8006aba <USBD_StdEPReq+0x112>
 8006aa0:	7bbb      	ldrb	r3, [r7, #14]
 8006aa2:	2b80      	cmp	r3, #128	; 0x80
 8006aa4:	d009      	beq.n	8006aba <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 f820 	bl	8007af0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ab0:	2180      	movs	r1, #128	; 0x80
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 f81c 	bl	8007af0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ab8:	e01c      	b.n	8006af4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fbe1 	bl	8007284 <USBD_CtlError>
              break;
 8006ac2:	e017      	b.n	8006af4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	885b      	ldrh	r3, [r3, #2]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d112      	bne.n	8006af2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006acc:	7bbb      	ldrb	r3, [r7, #14]
 8006ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 f827 	bl	8007b2e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fc97 	bl	8007414 <USBD_CtlSendStatus>
              }
              break;
 8006ae6:	e004      	b.n	8006af2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fbca 	bl	8007284 <USBD_CtlError>
              break;
 8006af0:	e000      	b.n	8006af4 <USBD_StdEPReq+0x14c>
              break;
 8006af2:	bf00      	nop
          }
          break;
 8006af4:	e0aa      	b.n	8006c4c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d002      	beq.n	8006b06 <USBD_StdEPReq+0x15e>
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d032      	beq.n	8006b6a <USBD_StdEPReq+0x1c2>
 8006b04:	e097      	b.n	8006c36 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b06:	7bbb      	ldrb	r3, [r7, #14]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <USBD_StdEPReq+0x174>
 8006b0c:	7bbb      	ldrb	r3, [r7, #14]
 8006b0e:	2b80      	cmp	r3, #128	; 0x80
 8006b10:	d004      	beq.n	8006b1c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fbb5 	bl	8007284 <USBD_CtlError>
                break;
 8006b1a:	e091      	b.n	8006c40 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	da0b      	bge.n	8006b3c <USBD_StdEPReq+0x194>
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	3310      	adds	r3, #16
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	4413      	add	r3, r2
 8006b38:	3304      	adds	r3, #4
 8006b3a:	e00b      	b.n	8006b54 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	4413      	add	r3, r2
 8006b52:	3304      	adds	r3, #4
 8006b54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fbf8 	bl	8007358 <USBD_CtlSendData>
              break;
 8006b68:	e06a      	b.n	8006c40 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	da11      	bge.n	8006b96 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b72:	7bbb      	ldrb	r3, [r7, #14]
 8006b74:	f003 020f 	and.w	r2, r3, #15
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	3318      	adds	r3, #24
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d117      	bne.n	8006bbc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fb78 	bl	8007284 <USBD_CtlError>
                  break;
 8006b94:	e054      	b.n	8006c40 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	f003 020f 	and.w	r2, r3, #15
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fb65 	bl	8007284 <USBD_CtlError>
                  break;
 8006bba:	e041      	b.n	8006c40 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	da0b      	bge.n	8006bdc <USBD_StdEPReq+0x234>
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
 8006bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	3310      	adds	r3, #16
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	3304      	adds	r3, #4
 8006bda:	e00b      	b.n	8006bf4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <USBD_StdEPReq+0x25a>
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	2b80      	cmp	r3, #128	; 0x80
 8006c00:	d103      	bne.n	8006c0a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	e00e      	b.n	8006c28 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 ffac 	bl	8007b6c <USBD_LL_IsStallEP>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	e002      	b.n	8006c28 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fb92 	bl	8007358 <USBD_CtlSendData>
              break;
 8006c34:	e004      	b.n	8006c40 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fb23 	bl	8007284 <USBD_CtlError>
              break;
 8006c3e:	bf00      	nop
          }
          break;
 8006c40:	e004      	b.n	8006c4c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fb1d 	bl	8007284 <USBD_CtlError>
          break;
 8006c4a:	bf00      	nop
      }
      break;
 8006c4c:	e004      	b.n	8006c58 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fb17 	bl	8007284 <USBD_CtlError>
      break;
 8006c56:	bf00      	nop
  }

  return ret;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	885b      	ldrh	r3, [r3, #2]
 8006c7e:	0a1b      	lsrs	r3, r3, #8
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	2b06      	cmp	r3, #6
 8006c86:	f200 8128 	bhi.w	8006eda <USBD_GetDescriptor+0x276>
 8006c8a:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <USBD_GetDescriptor+0x2c>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006cad 	.word	0x08006cad
 8006c94:	08006cc5 	.word	0x08006cc5
 8006c98:	08006d05 	.word	0x08006d05
 8006c9c:	08006edb 	.word	0x08006edb
 8006ca0:	08006edb 	.word	0x08006edb
 8006ca4:	08006e7b 	.word	0x08006e7b
 8006ca8:	08006ea7 	.word	0x08006ea7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	7c12      	ldrb	r2, [r2, #16]
 8006cb8:	f107 0108 	add.w	r1, r7, #8
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
 8006cc0:	60f8      	str	r0, [r7, #12]
      break;
 8006cc2:	e112      	b.n	8006eea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	7c1b      	ldrb	r3, [r3, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10d      	bne.n	8006ce8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	f107 0208 	add.w	r2, r7, #8
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4798      	blx	r3
 8006cdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ce6:	e100      	b.n	8006eea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf0:	f107 0208 	add.w	r2, r7, #8
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4798      	blx	r3
 8006cf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	2202      	movs	r2, #2
 8006d00:	701a      	strb	r2, [r3, #0]
      break;
 8006d02:	e0f2      	b.n	8006eea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	885b      	ldrh	r3, [r3, #2]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b05      	cmp	r3, #5
 8006d0c:	f200 80ac 	bhi.w	8006e68 <USBD_GetDescriptor+0x204>
 8006d10:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <USBD_GetDescriptor+0xb4>)
 8006d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d16:	bf00      	nop
 8006d18:	08006d31 	.word	0x08006d31
 8006d1c:	08006d65 	.word	0x08006d65
 8006d20:	08006d99 	.word	0x08006d99
 8006d24:	08006dcd 	.word	0x08006dcd
 8006d28:	08006e01 	.word	0x08006e01
 8006d2c:	08006e35 	.word	0x08006e35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	7c12      	ldrb	r2, [r2, #16]
 8006d48:	f107 0108 	add.w	r1, r7, #8
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4798      	blx	r3
 8006d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d52:	e091      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa94 	bl	8007284 <USBD_CtlError>
            err++;
 8006d5c:	7afb      	ldrb	r3, [r7, #11]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	72fb      	strb	r3, [r7, #11]
          break;
 8006d62:	e089      	b.n	8006e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	7c12      	ldrb	r2, [r2, #16]
 8006d7c:	f107 0108 	add.w	r1, r7, #8
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d86:	e077      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa7a 	bl	8007284 <USBD_CtlError>
            err++;
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	3301      	adds	r3, #1
 8006d94:	72fb      	strb	r3, [r7, #11]
          break;
 8006d96:	e06f      	b.n	8006e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00b      	beq.n	8006dbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	7c12      	ldrb	r2, [r2, #16]
 8006db0:	f107 0108 	add.w	r1, r7, #8
 8006db4:	4610      	mov	r0, r2
 8006db6:	4798      	blx	r3
 8006db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dba:	e05d      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa60 	bl	8007284 <USBD_CtlError>
            err++;
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dca:	e055      	b.n	8006e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	7c12      	ldrb	r2, [r2, #16]
 8006de4:	f107 0108 	add.w	r1, r7, #8
 8006de8:	4610      	mov	r0, r2
 8006dea:	4798      	blx	r3
 8006dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dee:	e043      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa46 	bl	8007284 <USBD_CtlError>
            err++;
 8006df8:	7afb      	ldrb	r3, [r7, #11]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8006dfe:	e03b      	b.n	8006e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	7c12      	ldrb	r2, [r2, #16]
 8006e18:	f107 0108 	add.w	r1, r7, #8
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
 8006e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e22:	e029      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa2c 	bl	8007284 <USBD_CtlError>
            err++;
 8006e2c:	7afb      	ldrb	r3, [r7, #11]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	72fb      	strb	r3, [r7, #11]
          break;
 8006e32:	e021      	b.n	8006e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00b      	beq.n	8006e58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	7c12      	ldrb	r2, [r2, #16]
 8006e4c:	f107 0108 	add.w	r1, r7, #8
 8006e50:	4610      	mov	r0, r2
 8006e52:	4798      	blx	r3
 8006e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e56:	e00f      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fa12 	bl	8007284 <USBD_CtlError>
            err++;
 8006e60:	7afb      	ldrb	r3, [r7, #11]
 8006e62:	3301      	adds	r3, #1
 8006e64:	72fb      	strb	r3, [r7, #11]
          break;
 8006e66:	e007      	b.n	8006e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa0a 	bl	8007284 <USBD_CtlError>
          err++;
 8006e70:	7afb      	ldrb	r3, [r7, #11]
 8006e72:	3301      	adds	r3, #1
 8006e74:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006e76:	e038      	b.n	8006eea <USBD_GetDescriptor+0x286>
 8006e78:	e037      	b.n	8006eea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	7c1b      	ldrb	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d109      	bne.n	8006e96 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8a:	f107 0208 	add.w	r2, r7, #8
 8006e8e:	4610      	mov	r0, r2
 8006e90:	4798      	blx	r3
 8006e92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e94:	e029      	b.n	8006eea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f9f3 	bl	8007284 <USBD_CtlError>
        err++;
 8006e9e:	7afb      	ldrb	r3, [r7, #11]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ea4:	e021      	b.n	8006eea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	7c1b      	ldrb	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10d      	bne.n	8006eca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb6:	f107 0208 	add.w	r2, r7, #8
 8006eba:	4610      	mov	r0, r2
 8006ebc:	4798      	blx	r3
 8006ebe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	2207      	movs	r2, #7
 8006ec6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ec8:	e00f      	b.n	8006eea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f9d9 	bl	8007284 <USBD_CtlError>
        err++;
 8006ed2:	7afb      	ldrb	r3, [r7, #11]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ed8:	e007      	b.n	8006eea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f9d1 	bl	8007284 <USBD_CtlError>
      err++;
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ee8:	bf00      	nop
  }

  if (err != 0U)
 8006eea:	7afb      	ldrb	r3, [r7, #11]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d11c      	bne.n	8006f2a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006ef0:	893b      	ldrh	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d011      	beq.n	8006f1a <USBD_GetDescriptor+0x2b6>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	88db      	ldrh	r3, [r3, #6]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00d      	beq.n	8006f1a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	88da      	ldrh	r2, [r3, #6]
 8006f02:	893b      	ldrh	r3, [r7, #8]
 8006f04:	4293      	cmp	r3, r2
 8006f06:	bf28      	it	cs
 8006f08:	4613      	movcs	r3, r2
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f0e:	893b      	ldrh	r3, [r7, #8]
 8006f10:	461a      	mov	r2, r3
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fa1f 	bl	8007358 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	88db      	ldrh	r3, [r3, #6]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d104      	bne.n	8006f2c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa76 	bl	8007414 <USBD_CtlSendStatus>
 8006f28:	e000      	b.n	8006f2c <USBD_GetDescriptor+0x2c8>
    return;
 8006f2a:	bf00      	nop
    }
  }
}
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop

08006f34 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	889b      	ldrh	r3, [r3, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d130      	bne.n	8006fa8 <USBD_SetAddress+0x74>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	88db      	ldrh	r3, [r3, #6]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d12c      	bne.n	8006fa8 <USBD_SetAddress+0x74>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	885b      	ldrh	r3, [r3, #2]
 8006f52:	2b7f      	cmp	r3, #127	; 0x7f
 8006f54:	d828      	bhi.n	8006fa8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d104      	bne.n	8006f76 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f988 	bl	8007284 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f74:	e01c      	b.n	8006fb0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	7bfa      	ldrb	r2, [r7, #15]
 8006f7a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fe1e 	bl	8007bc4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fa43 	bl	8007414 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9c:	e008      	b.n	8006fb0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa6:	e003      	b.n	8006fb0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f96a 	bl	8007284 <USBD_CtlError>
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	885b      	ldrh	r3, [r3, #2]
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	4b41      	ldr	r3, [pc, #260]	; (80070d0 <USBD_SetConfig+0x118>)
 8006fca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fcc:	4b40      	ldr	r3, [pc, #256]	; (80070d0 <USBD_SetConfig+0x118>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d904      	bls.n	8006fde <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f954 	bl	8007284 <USBD_CtlError>
 8006fdc:	e075      	b.n	80070ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d002      	beq.n	8006fee <USBD_SetConfig+0x36>
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d023      	beq.n	8007034 <USBD_SetConfig+0x7c>
 8006fec:	e062      	b.n	80070b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006fee:	4b38      	ldr	r3, [pc, #224]	; (80070d0 <USBD_SetConfig+0x118>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d01a      	beq.n	800702c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006ff6:	4b36      	ldr	r3, [pc, #216]	; (80070d0 <USBD_SetConfig+0x118>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2203      	movs	r2, #3
 8007004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007008:	4b31      	ldr	r3, [pc, #196]	; (80070d0 <USBD_SetConfig+0x118>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff f9f4 	bl	80063fc <USBD_SetClassConfig>
 8007014:	4603      	mov	r3, r0
 8007016:	2b02      	cmp	r3, #2
 8007018:	d104      	bne.n	8007024 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f931 	bl	8007284 <USBD_CtlError>
            return;
 8007022:	e052      	b.n	80070ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f9f5 	bl	8007414 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800702a:	e04e      	b.n	80070ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f9f1 	bl	8007414 <USBD_CtlSendStatus>
        break;
 8007032:	e04a      	b.n	80070ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007034:	4b26      	ldr	r3, [pc, #152]	; (80070d0 <USBD_SetConfig+0x118>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d112      	bne.n	8007062 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007044:	4b22      	ldr	r3, [pc, #136]	; (80070d0 <USBD_SetConfig+0x118>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800704e:	4b20      	ldr	r3, [pc, #128]	; (80070d0 <USBD_SetConfig+0x118>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff f9f0 	bl	800643a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f9da 	bl	8007414 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007060:	e033      	b.n	80070ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007062:	4b1b      	ldr	r3, [pc, #108]	; (80070d0 <USBD_SetConfig+0x118>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	429a      	cmp	r2, r3
 800706e:	d01d      	beq.n	80070ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	b2db      	uxtb	r3, r3
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7ff f9de 	bl	800643a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800707e:	4b14      	ldr	r3, [pc, #80]	; (80070d0 <USBD_SetConfig+0x118>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007088:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <USBD_SetConfig+0x118>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff f9b4 	bl	80063fc <USBD_SetClassConfig>
 8007094:	4603      	mov	r3, r0
 8007096:	2b02      	cmp	r3, #2
 8007098:	d104      	bne.n	80070a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f8f1 	bl	8007284 <USBD_CtlError>
            return;
 80070a2:	e012      	b.n	80070ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f9b5 	bl	8007414 <USBD_CtlSendStatus>
        break;
 80070aa:	e00e      	b.n	80070ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f9b1 	bl	8007414 <USBD_CtlSendStatus>
        break;
 80070b2:	e00a      	b.n	80070ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f8e4 	bl	8007284 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80070bc:	4b04      	ldr	r3, [pc, #16]	; (80070d0 <USBD_SetConfig+0x118>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff f9b9 	bl	800643a <USBD_ClrClassConfig>
        break;
 80070c8:	bf00      	nop
    }
  }
}
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000198 	.word	0x20000198

080070d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	88db      	ldrh	r3, [r3, #6]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d004      	beq.n	80070f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f8cb 	bl	8007284 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070ee:	e021      	b.n	8007134 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	db17      	blt.n	800712a <USBD_GetConfig+0x56>
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	dd02      	ble.n	8007104 <USBD_GetConfig+0x30>
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d00b      	beq.n	800711a <USBD_GetConfig+0x46>
 8007102:	e012      	b.n	800712a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3308      	adds	r3, #8
 800710e:	2201      	movs	r2, #1
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f920 	bl	8007358 <USBD_CtlSendData>
        break;
 8007118:	e00c      	b.n	8007134 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3304      	adds	r3, #4
 800711e:	2201      	movs	r2, #1
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f918 	bl	8007358 <USBD_CtlSendData>
        break;
 8007128:	e004      	b.n	8007134 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f8a9 	bl	8007284 <USBD_CtlError>
        break;
 8007132:	bf00      	nop
}
 8007134:	bf00      	nop
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714c:	3b01      	subs	r3, #1
 800714e:	2b02      	cmp	r3, #2
 8007150:	d81e      	bhi.n	8007190 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	88db      	ldrh	r3, [r3, #6]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d004      	beq.n	8007164 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f891 	bl	8007284 <USBD_CtlError>
        break;
 8007162:	e01a      	b.n	800719a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f043 0202 	orr.w	r2, r3, #2
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	330c      	adds	r3, #12
 8007184:	2202      	movs	r2, #2
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f8e5 	bl	8007358 <USBD_CtlSendData>
      break;
 800718e:	e004      	b.n	800719a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f876 	bl	8007284 <USBD_CtlError>
      break;
 8007198:	bf00      	nop
  }
}
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	885b      	ldrh	r3, [r3, #2]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d106      	bne.n	80071c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f929 	bl	8007414 <USBD_CtlSendStatus>
  }
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071da:	3b01      	subs	r3, #1
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d80b      	bhi.n	80071f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	885b      	ldrh	r3, [r3, #2]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d10c      	bne.n	8007202 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f90f 	bl	8007414 <USBD_CtlSendStatus>
      }
      break;
 80071f6:	e004      	b.n	8007202 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f842 	bl	8007284 <USBD_CtlError>
      break;
 8007200:	e000      	b.n	8007204 <USBD_ClrFeature+0x3a>
      break;
 8007202:	bf00      	nop
  }
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781a      	ldrb	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	785a      	ldrb	r2, [r3, #1]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	3302      	adds	r3, #2
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	b29a      	uxth	r2, r3
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	3303      	adds	r3, #3
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	b29b      	uxth	r3, r3
 800723a:	4413      	add	r3, r2
 800723c:	b29a      	uxth	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	3304      	adds	r3, #4
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	b29a      	uxth	r2, r3
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	3305      	adds	r3, #5
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	b29b      	uxth	r3, r3
 8007256:	4413      	add	r3, r2
 8007258:	b29a      	uxth	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	3306      	adds	r3, #6
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	b29a      	uxth	r2, r3
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	3307      	adds	r3, #7
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	b29b      	uxth	r3, r3
 8007272:	4413      	add	r3, r2
 8007274:	b29a      	uxth	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	80da      	strh	r2, [r3, #6]

}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr

08007284 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800728e:	2180      	movs	r1, #128	; 0x80
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fc2d 	bl	8007af0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007296:	2100      	movs	r1, #0
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fc29 	bl	8007af0 <USBD_LL_StallEP>
}
 800729e:	bf00      	nop
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b086      	sub	sp, #24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d032      	beq.n	8007322 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 f834 	bl	800732a <USBD_GetLen>
 80072c2:	4603      	mov	r3, r0
 80072c4:	3301      	adds	r3, #1
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	75fa      	strb	r2, [r7, #23]
 80072d6:	461a      	mov	r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4413      	add	r3, r2
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	7812      	ldrb	r2, [r2, #0]
 80072e0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	75fa      	strb	r2, [r7, #23]
 80072e8:	461a      	mov	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	4413      	add	r3, r2
 80072ee:	2203      	movs	r2, #3
 80072f0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80072f2:	e012      	b.n	800731a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	60fa      	str	r2, [r7, #12]
 80072fa:	7dfa      	ldrb	r2, [r7, #23]
 80072fc:	1c51      	adds	r1, r2, #1
 80072fe:	75f9      	strb	r1, [r7, #23]
 8007300:	4611      	mov	r1, r2
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	440a      	add	r2, r1
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	75fa      	strb	r2, [r7, #23]
 8007310:	461a      	mov	r2, r3
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	4413      	add	r3, r2
 8007316:	2200      	movs	r2, #0
 8007318:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e8      	bne.n	80072f4 <USBD_GetString+0x4e>
    }
  }
}
 8007322:	bf00      	nop
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007336:	e005      	b.n	8007344 <USBD_GetLen+0x1a>
  {
    len++;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	3301      	adds	r3, #1
 800733c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3301      	adds	r3, #1
 8007342:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f5      	bne.n	8007338 <USBD_GetLen+0xe>
  }

  return len;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	bc80      	pop	{r7}
 8007356:	4770      	bx	lr

08007358 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	4613      	mov	r3, r2
 8007364:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2202      	movs	r2, #2
 800736a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800736e:	88fa      	ldrh	r2, [r7, #6]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007374:	88fa      	ldrh	r2, [r7, #6]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800737a:	88fb      	ldrh	r3, [r7, #6]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	2100      	movs	r1, #0
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 fc3e 	bl	8007c02 <USBD_LL_Transmit>

  return USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	4613      	mov	r3, r2
 800739c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	2100      	movs	r1, #0
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fc2c 	bl	8007c02 <USBD_LL_Transmit>

  return USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	4613      	mov	r3, r2
 80073c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2203      	movs	r2, #3
 80073c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80073ca:	88fa      	ldrh	r2, [r7, #6]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80073d2:	88fa      	ldrh	r2, [r7, #6]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	2100      	movs	r1, #0
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 fc31 	bl	8007c48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	4613      	mov	r3, r2
 80073fc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	2100      	movs	r1, #0
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fc1f 	bl	8007c48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2204      	movs	r2, #4
 8007420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007424:	2300      	movs	r3, #0
 8007426:	2200      	movs	r2, #0
 8007428:	2100      	movs	r1, #0
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fbe9 	bl	8007c02 <USBD_LL_Transmit>

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2205      	movs	r2, #5
 8007446:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800744a:	2300      	movs	r3, #0
 800744c:	2200      	movs	r2, #0
 800744e:	2100      	movs	r1, #0
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fbf9 	bl	8007c48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007464:	2200      	movs	r2, #0
 8007466:	4912      	ldr	r1, [pc, #72]	; (80074b0 <MX_USB_DEVICE_Init+0x50>)
 8007468:	4812      	ldr	r0, [pc, #72]	; (80074b4 <MX_USB_DEVICE_Init+0x54>)
 800746a:	f7fe ff6d 	bl	8006348 <USBD_Init>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007474:	f7f9 f849 	bl	800050a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007478:	490f      	ldr	r1, [pc, #60]	; (80074b8 <MX_USB_DEVICE_Init+0x58>)
 800747a:	480e      	ldr	r0, [pc, #56]	; (80074b4 <MX_USB_DEVICE_Init+0x54>)
 800747c:	f7fe ff8f 	bl	800639e <USBD_RegisterClass>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007486:	f7f9 f840 	bl	800050a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800748a:	490c      	ldr	r1, [pc, #48]	; (80074bc <MX_USB_DEVICE_Init+0x5c>)
 800748c:	4809      	ldr	r0, [pc, #36]	; (80074b4 <MX_USB_DEVICE_Init+0x54>)
 800748e:	f7fe feef 	bl	8006270 <USBD_CDC_RegisterInterface>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007498:	f7f9 f837 	bl	800050a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800749c:	4805      	ldr	r0, [pc, #20]	; (80074b4 <MX_USB_DEVICE_Init+0x54>)
 800749e:	f7fe ff97 	bl	80063d0 <USBD_Start>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80074a8:	f7f9 f82f 	bl	800050a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074ac:	bf00      	nop
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	2000012c 	.word	0x2000012c
 80074b4:	20000418 	.word	0x20000418
 80074b8:	20000018 	.word	0x20000018
 80074bc:	2000011c 	.word	0x2000011c

080074c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074c4:	2200      	movs	r2, #0
 80074c6:	4905      	ldr	r1, [pc, #20]	; (80074dc <CDC_Init_FS+0x1c>)
 80074c8:	4805      	ldr	r0, [pc, #20]	; (80074e0 <CDC_Init_FS+0x20>)
 80074ca:	f7fe fee7 	bl	800629c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074ce:	4905      	ldr	r1, [pc, #20]	; (80074e4 <CDC_Init_FS+0x24>)
 80074d0:	4803      	ldr	r0, [pc, #12]	; (80074e0 <CDC_Init_FS+0x20>)
 80074d2:	f7fe fefc 	bl	80062ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074d8:	4618      	mov	r0, r3
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000ac4 	.word	0x20000ac4
 80074e0:	20000418 	.word	0x20000418
 80074e4:	200006dc 	.word	0x200006dc

080074e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bc80      	pop	{r7}
 80074f4:	4770      	bx	lr
	...

080074f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	6039      	str	r1, [r7, #0]
 8007502:	71fb      	strb	r3, [r7, #7]
 8007504:	4613      	mov	r3, r2
 8007506:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	2b23      	cmp	r3, #35	; 0x23
 800750c:	d84a      	bhi.n	80075a4 <CDC_Control_FS+0xac>
 800750e:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <CDC_Control_FS+0x1c>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	080075a5 	.word	0x080075a5
 8007518:	080075a5 	.word	0x080075a5
 800751c:	080075a5 	.word	0x080075a5
 8007520:	080075a5 	.word	0x080075a5
 8007524:	080075a5 	.word	0x080075a5
 8007528:	080075a5 	.word	0x080075a5
 800752c:	080075a5 	.word	0x080075a5
 8007530:	080075a5 	.word	0x080075a5
 8007534:	080075a5 	.word	0x080075a5
 8007538:	080075a5 	.word	0x080075a5
 800753c:	080075a5 	.word	0x080075a5
 8007540:	080075a5 	.word	0x080075a5
 8007544:	080075a5 	.word	0x080075a5
 8007548:	080075a5 	.word	0x080075a5
 800754c:	080075a5 	.word	0x080075a5
 8007550:	080075a5 	.word	0x080075a5
 8007554:	080075a5 	.word	0x080075a5
 8007558:	080075a5 	.word	0x080075a5
 800755c:	080075a5 	.word	0x080075a5
 8007560:	080075a5 	.word	0x080075a5
 8007564:	080075a5 	.word	0x080075a5
 8007568:	080075a5 	.word	0x080075a5
 800756c:	080075a5 	.word	0x080075a5
 8007570:	080075a5 	.word	0x080075a5
 8007574:	080075a5 	.word	0x080075a5
 8007578:	080075a5 	.word	0x080075a5
 800757c:	080075a5 	.word	0x080075a5
 8007580:	080075a5 	.word	0x080075a5
 8007584:	080075a5 	.word	0x080075a5
 8007588:	080075a5 	.word	0x080075a5
 800758c:	080075a5 	.word	0x080075a5
 8007590:	080075a5 	.word	0x080075a5
 8007594:	080075a5 	.word	0x080075a5
 8007598:	080075a5 	.word	0x080075a5
 800759c:	080075a5 	.word	0x080075a5
 80075a0:	080075a5 	.word	0x080075a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075a4:	bf00      	nop
  }

  return (USBD_OK);
 80075a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bc80      	pop	{r7}
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop

080075b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	4805      	ldr	r0, [pc, #20]	; (80075d8 <CDC_Receive_FS+0x24>)
 80075c2:	f7fe fe84 	bl	80062ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075c6:	4804      	ldr	r0, [pc, #16]	; (80075d8 <CDC_Receive_FS+0x24>)
 80075c8:	f7fe fe94 	bl	80062f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20000418 	.word	0x20000418

080075dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	6039      	str	r1, [r7, #0]
 80075e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2212      	movs	r2, #18
 80075ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075ee:	4b03      	ldr	r3, [pc, #12]	; (80075fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bc80      	pop	{r7}
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	20000148 	.word	0x20000148

08007600 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	4603      	mov	r3, r0
 8007608:	6039      	str	r1, [r7, #0]
 800760a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2204      	movs	r2, #4
 8007610:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007612:	4b03      	ldr	r3, [pc, #12]	; (8007620 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007614:	4618      	mov	r0, r3
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	bc80      	pop	{r7}
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	2000015c 	.word	0x2000015c

08007624 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	6039      	str	r1, [r7, #0]
 800762e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007630:	79fb      	ldrb	r3, [r7, #7]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d105      	bne.n	8007642 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	4907      	ldr	r1, [pc, #28]	; (8007658 <USBD_FS_ProductStrDescriptor+0x34>)
 800763a:	4808      	ldr	r0, [pc, #32]	; (800765c <USBD_FS_ProductStrDescriptor+0x38>)
 800763c:	f7ff fe33 	bl	80072a6 <USBD_GetString>
 8007640:	e004      	b.n	800764c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	4904      	ldr	r1, [pc, #16]	; (8007658 <USBD_FS_ProductStrDescriptor+0x34>)
 8007646:	4805      	ldr	r0, [pc, #20]	; (800765c <USBD_FS_ProductStrDescriptor+0x38>)
 8007648:	f7ff fe2d 	bl	80072a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800764c:	4b02      	ldr	r3, [pc, #8]	; (8007658 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000eac 	.word	0x20000eac
 800765c:	08007dd0 	.word	0x08007dd0

08007660 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	6039      	str	r1, [r7, #0]
 800766a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	4904      	ldr	r1, [pc, #16]	; (8007680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007670:	4804      	ldr	r0, [pc, #16]	; (8007684 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007672:	f7ff fe18 	bl	80072a6 <USBD_GetString>
  return USBD_StrDesc;
 8007676:	4b02      	ldr	r3, [pc, #8]	; (8007680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000eac 	.word	0x20000eac
 8007684:	08007de8 	.word	0x08007de8

08007688 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	4603      	mov	r3, r0
 8007690:	6039      	str	r1, [r7, #0]
 8007692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	221a      	movs	r2, #26
 8007698:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800769a:	f000 f843 	bl	8007724 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800769e:	4b02      	ldr	r3, [pc, #8]	; (80076a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000160 	.word	0x20000160

080076ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	6039      	str	r1, [r7, #0]
 80076b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076b8:	79fb      	ldrb	r3, [r7, #7]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d105      	bne.n	80076ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	4907      	ldr	r1, [pc, #28]	; (80076e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076c2:	4808      	ldr	r0, [pc, #32]	; (80076e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076c4:	f7ff fdef 	bl	80072a6 <USBD_GetString>
 80076c8:	e004      	b.n	80076d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	4904      	ldr	r1, [pc, #16]	; (80076e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076ce:	4805      	ldr	r0, [pc, #20]	; (80076e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076d0:	f7ff fde9 	bl	80072a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076d4:	4b02      	ldr	r3, [pc, #8]	; (80076e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000eac 	.word	0x20000eac
 80076e4:	08007dfc 	.word	0x08007dfc

080076e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	6039      	str	r1, [r7, #0]
 80076f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d105      	bne.n	8007706 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	4907      	ldr	r1, [pc, #28]	; (800771c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076fe:	4808      	ldr	r0, [pc, #32]	; (8007720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007700:	f7ff fdd1 	bl	80072a6 <USBD_GetString>
 8007704:	e004      	b.n	8007710 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	4904      	ldr	r1, [pc, #16]	; (800771c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800770a:	4805      	ldr	r0, [pc, #20]	; (8007720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800770c:	f7ff fdcb 	bl	80072a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007710:	4b02      	ldr	r3, [pc, #8]	; (800771c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20000eac 	.word	0x20000eac
 8007720:	08007e08 	.word	0x08007e08

08007724 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800772a:	4b0f      	ldr	r3, [pc, #60]	; (8007768 <Get_SerialNum+0x44>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007730:	4b0e      	ldr	r3, [pc, #56]	; (800776c <Get_SerialNum+0x48>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007736:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <Get_SerialNum+0x4c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d009      	beq.n	800775e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800774a:	2208      	movs	r2, #8
 800774c:	4909      	ldr	r1, [pc, #36]	; (8007774 <Get_SerialNum+0x50>)
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 f814 	bl	800777c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007754:	2204      	movs	r2, #4
 8007756:	4908      	ldr	r1, [pc, #32]	; (8007778 <Get_SerialNum+0x54>)
 8007758:	68b8      	ldr	r0, [r7, #8]
 800775a:	f000 f80f 	bl	800777c <IntToUnicode>
  }
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	1ffff7e8 	.word	0x1ffff7e8
 800776c:	1ffff7ec 	.word	0x1ffff7ec
 8007770:	1ffff7f0 	.word	0x1ffff7f0
 8007774:	20000162 	.word	0x20000162
 8007778:	20000172 	.word	0x20000172

0800777c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	4613      	mov	r3, r2
 8007788:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800778e:	2300      	movs	r3, #0
 8007790:	75fb      	strb	r3, [r7, #23]
 8007792:	e027      	b.n	80077e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	0f1b      	lsrs	r3, r3, #28
 8007798:	2b09      	cmp	r3, #9
 800779a:	d80b      	bhi.n	80077b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	0f1b      	lsrs	r3, r3, #28
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	4619      	mov	r1, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	440b      	add	r3, r1
 80077ac:	3230      	adds	r2, #48	; 0x30
 80077ae:	b2d2      	uxtb	r2, r2
 80077b0:	701a      	strb	r2, [r3, #0]
 80077b2:	e00a      	b.n	80077ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	0f1b      	lsrs	r3, r3, #28
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	4619      	mov	r1, r3
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	440b      	add	r3, r1
 80077c4:	3237      	adds	r2, #55	; 0x37
 80077c6:	b2d2      	uxtb	r2, r2
 80077c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	3301      	adds	r3, #1
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	4413      	add	r3, r2
 80077da:	2200      	movs	r2, #0
 80077dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	3301      	adds	r3, #1
 80077e2:	75fb      	strb	r3, [r7, #23]
 80077e4:	7dfa      	ldrb	r2, [r7, #23]
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d3d3      	bcc.n	8007794 <IntToUnicode+0x18>
  }
}
 80077ec:	bf00      	nop
 80077ee:	371c      	adds	r7, #28
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr
	...

080077f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a0d      	ldr	r2, [pc, #52]	; (800783c <HAL_PCD_MspInit+0x44>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d113      	bne.n	8007832 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800780a:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <HAL_PCD_MspInit+0x48>)
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	4a0c      	ldr	r2, [pc, #48]	; (8007840 <HAL_PCD_MspInit+0x48>)
 8007810:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007814:	61d3      	str	r3, [r2, #28]
 8007816:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <HAL_PCD_MspInit+0x48>)
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007822:	2200      	movs	r2, #0
 8007824:	2100      	movs	r1, #0
 8007826:	2014      	movs	r0, #20
 8007828:	f7f9 faff 	bl	8000e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800782c:	2014      	movs	r0, #20
 800782e:	f7f9 fb18 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	40005c00 	.word	0x40005c00
 8007840:	40021000 	.word	0x40021000

08007844 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007858:	4619      	mov	r1, r3
 800785a:	4610      	mov	r0, r2
 800785c:	f7fe fe00 	bl	8006460 <USBD_LL_SetupStage>
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800787a:	78fa      	ldrb	r2, [r7, #3]
 800787c:	6879      	ldr	r1, [r7, #4]
 800787e:	4613      	mov	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	440b      	add	r3, r1
 8007888:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	78fb      	ldrb	r3, [r7, #3]
 8007890:	4619      	mov	r1, r3
 8007892:	f7fe fe30 	bl	80064f6 <USBD_LL_DataOutStage>
}
 8007896:	bf00      	nop
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b082      	sub	sp, #8
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	460b      	mov	r3, r1
 80078a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80078b0:	78fa      	ldrb	r2, [r7, #3]
 80078b2:	6879      	ldr	r1, [r7, #4]
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	440b      	add	r3, r1
 80078be:	333c      	adds	r3, #60	; 0x3c
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	4619      	mov	r1, r3
 80078c6:	f7fe fe87 	bl	80065d8 <USBD_LL_DataInStage>
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fe ff97 	bl	8006814 <USBD_LL_SOF>
}
 80078e6:	bf00      	nop
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078f6:	2301      	movs	r3, #1
 80078f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d001      	beq.n	8007906 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007902:	f7f8 fe02 	bl	800050a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800790c:	7bfa      	ldrb	r2, [r7, #15]
 800790e:	4611      	mov	r1, r2
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe ff47 	bl	80067a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800791c:	4618      	mov	r0, r3
 800791e:	f7fe ff00 	bl	8006722 <USBD_LL_Reset>
}
 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe ff41 	bl	80067c2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007948:	4b04      	ldr	r3, [pc, #16]	; (800795c <HAL_PCD_SuspendCallback+0x30>)
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	4a03      	ldr	r2, [pc, #12]	; (800795c <HAL_PCD_SuspendCallback+0x30>)
 800794e:	f043 0306 	orr.w	r3, r3, #6
 8007952:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007954:	bf00      	nop
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	e000ed00 	.word	0xe000ed00

08007960 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe ff3b 	bl	80067ea <USBD_LL_Resume>
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007984:	4a28      	ldr	r2, [pc, #160]	; (8007a28 <USBD_LL_Init+0xac>)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a26      	ldr	r2, [pc, #152]	; (8007a28 <USBD_LL_Init+0xac>)
 8007990:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007994:	4b24      	ldr	r3, [pc, #144]	; (8007a28 <USBD_LL_Init+0xac>)
 8007996:	4a25      	ldr	r2, [pc, #148]	; (8007a2c <USBD_LL_Init+0xb0>)
 8007998:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800799a:	4b23      	ldr	r3, [pc, #140]	; (8007a28 <USBD_LL_Init+0xac>)
 800799c:	2208      	movs	r2, #8
 800799e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80079a0:	4b21      	ldr	r3, [pc, #132]	; (8007a28 <USBD_LL_Init+0xac>)
 80079a2:	2202      	movs	r2, #2
 80079a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80079a6:	4b20      	ldr	r3, [pc, #128]	; (8007a28 <USBD_LL_Init+0xac>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80079ac:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <USBD_LL_Init+0xac>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80079b2:	4b1d      	ldr	r3, [pc, #116]	; (8007a28 <USBD_LL_Init+0xac>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80079b8:	481b      	ldr	r0, [pc, #108]	; (8007a28 <USBD_LL_Init+0xac>)
 80079ba:	f7f9 fbdf 	bl	800117c <HAL_PCD_Init>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80079c4:	f7f8 fda1 	bl	800050a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079ce:	2318      	movs	r3, #24
 80079d0:	2200      	movs	r2, #0
 80079d2:	2100      	movs	r1, #0
 80079d4:	f7fa ff13 	bl	80027fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079de:	2358      	movs	r3, #88	; 0x58
 80079e0:	2200      	movs	r2, #0
 80079e2:	2180      	movs	r1, #128	; 0x80
 80079e4:	f7fa ff0b 	bl	80027fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079ee:	23c0      	movs	r3, #192	; 0xc0
 80079f0:	2200      	movs	r2, #0
 80079f2:	2181      	movs	r1, #129	; 0x81
 80079f4:	f7fa ff03 	bl	80027fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007a02:	2200      	movs	r2, #0
 8007a04:	2101      	movs	r1, #1
 8007a06:	f7fa fefa 	bl	80027fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a14:	2200      	movs	r2, #0
 8007a16:	2182      	movs	r1, #130	; 0x82
 8007a18:	f7fa fef1 	bl	80027fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	200010ac 	.word	0x200010ac
 8007a2c:	40005c00 	.word	0x40005c00

08007a30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7f9 fca3 	bl	8001392 <HAL_PCD_Start>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f94e 	bl	8007cf4 <USBD_Get_USB_Status>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	4608      	mov	r0, r1
 8007a70:	4611      	mov	r1, r2
 8007a72:	461a      	mov	r2, r3
 8007a74:	4603      	mov	r3, r0
 8007a76:	70fb      	strb	r3, [r7, #3]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	70bb      	strb	r3, [r7, #2]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a8e:	78bb      	ldrb	r3, [r7, #2]
 8007a90:	883a      	ldrh	r2, [r7, #0]
 8007a92:	78f9      	ldrb	r1, [r7, #3]
 8007a94:	f7f9 fe1d 	bl	80016d2 <HAL_PCD_EP_Open>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f928 	bl	8007cf4 <USBD_Get_USB_Status>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	460b      	mov	r3, r1
 8007abc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007acc:	78fa      	ldrb	r2, [r7, #3]
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7f9 fe64 	bl	800179e <HAL_PCD_EP_Close>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 f909 	bl	8007cf4 <USBD_Get_USB_Status>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7f9 ff24 	bl	800195c <HAL_PCD_EP_SetStall>
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f8ea 	bl	8007cf4 <USBD_Get_USB_Status>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	460b      	mov	r3, r1
 8007b38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b48:	78fa      	ldrb	r2, [r7, #3]
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7f9 ff65 	bl	8001a1c <HAL_PCD_EP_ClrStall>
 8007b52:	4603      	mov	r3, r0
 8007b54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 f8cb 	bl	8007cf4 <USBD_Get_USB_Status>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	da0c      	bge.n	8007ba2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b8e:	68f9      	ldr	r1, [r7, #12]
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	4613      	mov	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	440b      	add	r3, r1
 8007b9c:	3302      	adds	r3, #2
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	e00b      	b.n	8007bba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ba8:	68f9      	ldr	r1, [r7, #12]
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	00db      	lsls	r3, r3, #3
 8007bb2:	440b      	add	r3, r1
 8007bb4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007bb8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr

08007bc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bde:	78fa      	ldrb	r2, [r7, #3]
 8007be0:	4611      	mov	r1, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7f9 fd50 	bl	8001688 <HAL_PCD_SetAddress>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 f880 	bl	8007cf4 <USBD_Get_USB_Status>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b086      	sub	sp, #24
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	60f8      	str	r0, [r7, #12]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	460b      	mov	r3, r1
 8007c10:	72fb      	strb	r3, [r7, #11]
 8007c12:	4613      	mov	r3, r2
 8007c14:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c24:	893b      	ldrh	r3, [r7, #8]
 8007c26:	7af9      	ldrb	r1, [r7, #11]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	f7f9 fe54 	bl	80018d6 <HAL_PCD_EP_Transmit>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 f85d 	bl	8007cf4 <USBD_Get_USB_Status>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	607a      	str	r2, [r7, #4]
 8007c52:	461a      	mov	r2, r3
 8007c54:	460b      	mov	r3, r1
 8007c56:	72fb      	strb	r3, [r7, #11]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c6a:	893b      	ldrh	r3, [r7, #8]
 8007c6c:	7af9      	ldrb	r1, [r7, #11]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	f7f9 fddd 	bl	800182e <HAL_PCD_EP_Receive>
 8007c74:	4603      	mov	r3, r0
 8007c76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 f83a 	bl	8007cf4 <USBD_Get_USB_Status>
 8007c80:	4603      	mov	r3, r0
 8007c82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c84:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ca0:	78fa      	ldrb	r2, [r7, #3]
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7f9 fdff 	bl	80018a8 <HAL_PCD_EP_GetRxCount>
 8007caa:	4603      	mov	r3, r0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cbc:	4b02      	ldr	r3, [pc, #8]	; (8007cc8 <USBD_static_malloc+0x14>)
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bc80      	pop	{r7}
 8007cc6:	4770      	bx	lr
 8007cc8:	2000019c 	.word	0x2000019c

08007ccc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]

}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bc80      	pop	{r7}
 8007cdc:	4770      	bx	lr

08007cde <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007cea:	bf00      	nop
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr

08007cf4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d817      	bhi.n	8007d38 <USBD_Get_USB_Status+0x44>
 8007d08:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <USBD_Get_USB_Status+0x1c>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007d21 	.word	0x08007d21
 8007d14:	08007d27 	.word	0x08007d27
 8007d18:	08007d2d 	.word	0x08007d2d
 8007d1c:	08007d33 	.word	0x08007d33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
    break;
 8007d24:	e00b      	b.n	8007d3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d26:	2302      	movs	r3, #2
 8007d28:	73fb      	strb	r3, [r7, #15]
    break;
 8007d2a:	e008      	b.n	8007d3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d30:	e005      	b.n	8007d3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d32:	2302      	movs	r3, #2
 8007d34:	73fb      	strb	r3, [r7, #15]
    break;
 8007d36:	e002      	b.n	8007d3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d38:	2302      	movs	r3, #2
 8007d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d3c:	bf00      	nop
  }
  return usb_status;
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bc80      	pop	{r7}
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop

08007d4c <__libc_init_array>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	2500      	movs	r5, #0
 8007d50:	4e0c      	ldr	r6, [pc, #48]	; (8007d84 <__libc_init_array+0x38>)
 8007d52:	4c0d      	ldr	r4, [pc, #52]	; (8007d88 <__libc_init_array+0x3c>)
 8007d54:	1ba4      	subs	r4, r4, r6
 8007d56:	10a4      	asrs	r4, r4, #2
 8007d58:	42a5      	cmp	r5, r4
 8007d5a:	d109      	bne.n	8007d70 <__libc_init_array+0x24>
 8007d5c:	f000 f822 	bl	8007da4 <_init>
 8007d60:	2500      	movs	r5, #0
 8007d62:	4e0a      	ldr	r6, [pc, #40]	; (8007d8c <__libc_init_array+0x40>)
 8007d64:	4c0a      	ldr	r4, [pc, #40]	; (8007d90 <__libc_init_array+0x44>)
 8007d66:	1ba4      	subs	r4, r4, r6
 8007d68:	10a4      	asrs	r4, r4, #2
 8007d6a:	42a5      	cmp	r5, r4
 8007d6c:	d105      	bne.n	8007d7a <__libc_init_array+0x2e>
 8007d6e:	bd70      	pop	{r4, r5, r6, pc}
 8007d70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d74:	4798      	blx	r3
 8007d76:	3501      	adds	r5, #1
 8007d78:	e7ee      	b.n	8007d58 <__libc_init_array+0xc>
 8007d7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d7e:	4798      	blx	r3
 8007d80:	3501      	adds	r5, #1
 8007d82:	e7f2      	b.n	8007d6a <__libc_init_array+0x1e>
 8007d84:	08007e28 	.word	0x08007e28
 8007d88:	08007e28 	.word	0x08007e28
 8007d8c:	08007e28 	.word	0x08007e28
 8007d90:	08007e2c 	.word	0x08007e2c

08007d94 <memset>:
 8007d94:	4603      	mov	r3, r0
 8007d96:	4402      	add	r2, r0
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d100      	bne.n	8007d9e <memset+0xa>
 8007d9c:	4770      	bx	lr
 8007d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007da2:	e7f9      	b.n	8007d98 <memset+0x4>

08007da4 <_init>:
 8007da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da6:	bf00      	nop
 8007da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007daa:	bc08      	pop	{r3}
 8007dac:	469e      	mov	lr, r3
 8007dae:	4770      	bx	lr

08007db0 <_fini>:
 8007db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db2:	bf00      	nop
 8007db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db6:	bc08      	pop	{r3}
 8007db8:	469e      	mov	lr, r3
 8007dba:	4770      	bx	lr
